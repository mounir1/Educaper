'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumSupport = require('appium-support');

var _appiumTestSupport = require('appium-test-support');

var _libInstaller = require('../../lib/installer');

var _libLogger = require('../../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('appium-selendroid-installer', function () {
  describe('setupSelendroid', (0, _appiumTestSupport.withMocks)({ log: _libLogger2['default'] }, function (mocks) {
    it('should error and stop if jar cannot be found', function callee$2$0() {
      var oldEnv;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            oldEnv = _lodash2['default'].clone(process.env);

            process.env = _Object$assign(process.env, { PATH: "" });
            mocks.log.expects("error").once();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libInstaller.setupSelendroid)());

          case 5:
            mocks.log.verify();
            process.env = oldEnv;

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('serverExists', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs }, function (mocks) {
    it('should return true if both apk and manifest exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_APK_PATH).returns(_Promise.resolve(true));
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_MANIFEST_PATH).returns(_Promise.resolve(true));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 4:
            context$3$0.sent.should.be['true'];

            mocks.fs.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return false if apk does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_APK_PATH).returns(_Promise.resolve(false));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 3:
            context$3$0.sent.should.be['false'];

            mocks.fs.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return false if manifest does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_APK_PATH).returns(_Promise.resolve(true));
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_MANIFEST_PATH).returns(_Promise.resolve(false));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 4:
            context$3$0.sent.should.be['false'];

            mocks.fs.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return false if neither apk or manifest does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_APK_PATH).returns(_Promise.resolve(false));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 3:
            context$3$0.sent.should.be['false'];

            mocks.fs.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return false if fs.exists throws a ENOENT error', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_APK_PATH).throws({ code: 'ENOENT' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 3:
            context$3$0.sent.should.be['false'];

            mocks.fs.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error if fs.exists throws a non-ENOENT error', function callee$2$0() {
      var error;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            error = new Error();

            error.code = 'EACCES';
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.SE_APK_PATH).throws(error);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)().should.eventually.be.rejectedWith(error));

          case 5:
            mocks.fs.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});

// unset PATH in env so we can't find 'jar' on path
// (this turned out to be easier than trying to mock teen_process.exec
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9pbnN0YWxsZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7b0JBQ0wsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7NkJBQzFCLGdCQUFnQjs7aUNBQ1QscUJBQXFCOzs0QkFDOEIscUJBQXFCOzt5QkFDbEYsa0JBQWtCOzs7O0FBR2xDLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLDZCQUE2QixFQUFFLFlBQU07QUFDNUMsVUFBUSxDQUFDLGlCQUFpQixFQUFFLGtDQUFVLEVBQUMsR0FBRyx3QkFBQSxFQUFDLEVBQUUsVUFBQyxLQUFLLEVBQUs7QUFDdEQsTUFBRSxDQUFDLDhDQUE4QyxFQUFFO1VBRzdDLE1BQU07Ozs7QUFBTixrQkFBTSxHQUFHLG9CQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDOztBQUNqQyxtQkFBTyxDQUFDLEdBQUcsR0FBRyxlQUFjLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQztBQUNyRCxpQkFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7OzZDQUM1QixvQ0FBaUI7OztBQUN2QixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuQixtQkFBTyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7Ozs7Ozs7S0FDdEIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7O0FBRUosVUFBUSxDQUFDLGNBQWMsRUFBRSxrQ0FBVSxFQUFDLEVBQUUsbUJBQUEsRUFBQyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQ2xELE1BQUUsQ0FBQyxtREFBbUQsRUFBRTs7OztBQUN0RCxpQkFBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENB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RUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ25CLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQyxDQUFDO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9pbnN0YWxsZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IHdpdGhNb2NrcyB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuaW1wb3J0IHsgc2VydmVyRXhpc3RzLCBTRV9BUEtfUEFUSCwgU0VfTUFOSUZFU1RfUEFUSCwgc2V0dXBTZWxlbmRyb2lkIH0gZnJvbSAnLi4vLi4vbGliL2luc3RhbGxlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uLy4uL2xpYi9sb2dnZXInO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdhcHBpdW0tc2VsZW5kcm9pZC1pbnN0YWxsZXInLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdzZXR1cFNlbGVuZHJvaWQnLCB3aXRoTW9ja3Moe2xvZ30sIChtb2NrcykgPT4ge1xuICAgIGl0KCdzaG91bGQgZXJyb3IgYW5kIHN0b3AgaWYgamFyIGNhbm5vdCBiZSBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIHVuc2V0IFBBVEggaW4gZW52IHNvIHdlIGNhbid0IGZpbmQgJ2phcicgb24gcGF0aFxuICAgICAgLy8gKHRoaXMgdHVybmVkIG91dCB0byBiZSBlYXNpZXIgdGhhbiB0cnlpbmcgdG8gbW9jayB0ZWVuX3Byb2Nlc3MuZXhlY1xuICAgICAgbGV0IG9sZEVudiA9IF8uY2xvbmUocHJvY2Vzcy5lbnYpO1xuICAgICAgcHJvY2Vzcy5lbnYgPSBPYmplY3QuYXNzaWduKHByb2Nlc3MuZW52LCB7UEFUSDogXCJcIn0pO1xuICAgICAgbW9ja3MubG9nLmV4cGVjdHMoXCJlcnJvclwiKS5vbmNlKCk7XG4gICAgICBhd2FpdCBzZXR1cFNlbGVuZHJvaWQoKTtcbiAgICAgIG1vY2tzLmxvZy52ZXJpZnkoKTtcbiAgICAgIHByb2Nlc3MuZW52ID0gb2xkRW52O1xuICAgIH0pO1xuICB9KSk7XG5cbiAgZGVzY3JpYmUoJ3NlcnZlckV4aXN0cycsIHdpdGhNb2Nrcyh7ZnN9LCAobW9ja3MpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGlmIGJvdGggYXBrIGFuZCBtYW5pZmVzdCBleGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tzLmZzLmV4cGVjdHMoXCJleGlzdHNcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFNFX0FQS19QQVRIKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUodHJ1ZSkpO1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cyhcImV4aXN0c1wiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoU0VfTUFOSUZFU1RfUEFUSClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKHRydWUpKTtcbiAgICAgIChhd2FpdCBzZXJ2ZXJFeGlzdHMoKSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBtb2Nrcy5mcy52ZXJpZnkoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBpZiBhcGsgZG9lcyBub3QgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhTRV9BUEtfUEFUSClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKGZhbHNlKSk7XG4gICAgICAoYXdhaXQgc2VydmVyRXhpc3RzKCkpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIG1vY2tzLmZzLnZlcmlmeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIGlmIG1hbmlmZXN0IGRvZXMgbm90IGV4aXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cyhcImV4aXN0c1wiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoU0VfQVBLX1BBVEgpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSh0cnVlKSk7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhTRV9NQU5JRkVTVF9QQVRIKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoZmFsc2UpKTtcbiAgICAgIChhd2FpdCBzZXJ2ZXJFeGlzdHMoKSkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgaWYgbmVpdGhlciBhcGsgb3IgbWFuaWZlc3QgZG9lcyBub3QgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhTRV9BUEtfUEFUSClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKGZhbHNlKSk7XG4gICAgICAoYXdhaXQgc2VydmVyRXhpc3RzKCkpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIG1vY2tzLmZzLnZlcmlmeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIGlmIGZzLmV4aXN0cyB0aHJvd3MgYSBFTk9FTlQgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhTRV9BUEtfUEFUSClcbiAgICAgICAgLnRocm93cyh7Y29kZTonRU5PRU5UJ30pO1xuICAgICAgKGF3YWl0IHNlcnZlckV4aXN0cygpKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICBtb2Nrcy5mcy52ZXJpZnkoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIGZzLmV4aXN0cyB0aHJvd3MgYSBub24tRU5PRU5UIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKCk7XG4gICAgICBlcnJvci5jb2RlID0gJ0VBQ0NFUyc7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhTRV9BUEtfUEFUSClcbiAgICAgICAgLnRocm93cyhlcnJvcik7XG4gICAgICBhd2FpdCBzZXJ2ZXJFeGlzdHMoKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoZXJyb3IpO1xuICAgICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgfSk7XG4gIH0pKTtcbn0pO1xuIl19