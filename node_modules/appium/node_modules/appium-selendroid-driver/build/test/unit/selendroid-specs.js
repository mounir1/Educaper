require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libSelendroid = require('../../lib/selendroid');

var _libSelendroid2 = _interopRequireDefault(_libSelendroid);

var _appiumSupport = require('appium-support');

var _libInstaller = require('../../lib/installer');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildSelendroidOpts() {
  var adb = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

  if (!adb) {
    adb = new _appiumAdb2['default']();
  }
  return {
    adb: adb,
    appPackage: 'io.appium.foo',
    appActivity: 'StartActivity',
    tmpDir: '/tmp',
    apk: '/path/to/our.apk',
    host: 'localhost',
    systemPort: 4567,
    devicePort: 8080
  };
}

describe('SelendroidServer', function () {
  var adb = new _appiumAdb2['default']();

  describe('#constructor', function () {
    it('should complain if required options not sent', function () {
      (function () {
        new _libSelendroid2['default']();
      }).should['throw'](/Option.*adb.*required/);
      (function () {
        new _libSelendroid2['default']({});
      }).should['throw'](/Option.*adb.*required/);
      (function () {
        new _libSelendroid2['default']({ adb: 'foo' });
      }).should['throw'](/Option.*appPackage.*required/);
    });
  });

  describe('#prepareModifiedServer', (0, _appiumTestSupport.withMocks)({ adb: adb, fs: _appiumSupport.fs }, function (mocks, S) {
    var selendroid = new _libSelendroid2['default'](buildSelendroidOpts(adb));
    it('should build a modified server if one doesnt exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(selendroid.modServerPath).returns(_Promise.resolve(false));
            // should uninstall the apk if it's rebuilt
            mocks.adb.expects("uninstallApk").once().withExactArgs(selendroid.modServerPkg).returns(_Promise.resolve());
            mocks.selendroid = S.sandbox.mock(selendroid);
            // should call the rebuilding method
            mocks.selendroid.expects("buildNewModServer").once().returns(_Promise.resolve());
            // should check certs regardless
            mocks.selendroid.expects('checkAndSignCert').once().returns(_Promise.resolve(true));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(selendroid.prepareModifiedServer());

          case 7:
            mocks.fs.verify();
            mocks.adb.verify();
            mocks.selendroid.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not build a modified server if one does exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(selendroid.modServerPath).returns(_Promise.resolve(true));
            // should not uninstall the apk if it's not rebuilt
            mocks.adb.expects("uninstallApk").never();
            mocks.selendroid = S.sandbox.mock(selendroid);
            // should not call the building method
            mocks.selendroid.expects("buildNewModServer").never();
            // should check certs regardless
            mocks.selendroid.expects("checkAndSignCert").once().returns(_Promise.resolve());
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(selendroid.prepareModifiedServer());

          case 7:
            mocks.fs.verify();
            mocks.adb.verify();
            mocks.selendroid.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('#buildNewModServer', (0, _appiumTestSupport.withMocks)({ adb: adb, fs: _appiumSupport.fs }, function (mocks) {
    var selendroid = new _libSelendroid2['default'](buildSelendroidOpts(adb));
    it('should go through the steps to compile a server', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("mkdir").once().withExactArgs('/tmp/' + selendroid.appPackage).returns(_Promise.resolve());
            mocks.fs.expects("copyFile").once().withExactArgs(_libInstaller.SE_MANIFEST_PATH, '/tmp/AndroidManifest.xml').returns(_Promise.resolve());
            mocks.adb.expects("initAapt").once().returns(_Promise.resolve());
            mocks.adb.expects("compileManifest").once().withExactArgs('/tmp/AndroidManifest.xml', selendroid.modServerPkg, selendroid.appPackage).returns(_Promise.resolve());
            mocks.adb.expects("insertManifest").once().withExactArgs('/tmp/AndroidManifest.xml', _libInstaller.SE_APK_PATH, selendroid.modServerPath).returns(_Promise.resolve());
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(selendroid.buildNewModServer());

          case 7:
            mocks.fs.verify();
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('#checkAndSignCert', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    var selendroid = new _libSelendroid2['default'](buildSelendroidOpts(adb));
    it('should check and sign both apks if neither are signed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("checkApkCert").once().withExactArgs(selendroid.modServerPath, selendroid.appPackage).returns(_Promise.resolve(false));
            mocks.adb.expects("checkApkCert").once().withExactArgs(selendroid.apk, selendroid.appPackage).returns(_Promise.resolve(false));
            mocks.adb.expects("sign").once().withExactArgs(selendroid.modServerPath).returns(_Promise.resolve());
            mocks.adb.expects("sign").once().withExactArgs(selendroid.apk).returns(_Promise.resolve());
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(selendroid.checkAndSignCert(selendroid.modServerPath));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(selendroid.checkAndSignCert(selendroid.apk));

          case 8:
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should check and sign only one apks if one is signed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("checkApkCert").once().withExactArgs(selendroid.modServerPath, selendroid.appPackage).returns(_Promise.resolve(false));
            mocks.adb.expects("checkApkCert").once().withExactArgs(selendroid.apk, selendroid.appPackage).returns(_Promise.resolve(true));
            mocks.adb.expects("sign").once().withExactArgs(selendroid.modServerPath).returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(selendroid.checkAndSignCert(selendroid.modServerPath));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(selendroid.checkAndSignCert(selendroid.apk));

          case 7:
            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should check and sign neither apk if both are signed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("checkApkCert").once().withExactArgs(selendroid.modServerPath, selendroid.appPackage).returns(_Promise.resolve(true));
            mocks.adb.expects("checkApkCert").once().withExactArgs(selendroid.apk, selendroid.appPackage).returns(_Promise.resolve(true));
            mocks.adb.expects("sign").never();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(selendroid.checkAndSignCert(selendroid.modServerPath));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(selendroid.checkAndSignCert(selendroid.apk));

          case 7:
            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('#startSession', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks, S) {
    var selendroid = new _libSelendroid2['default'](buildSelendroidOpts(adb));
    it('should start instrumented app, wait for status, and start a session', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            mocks.jwproxy = S.sandbox.mock(selendroid.jwproxy);
            mocks.adb.expects("instrument").once().withArgs(selendroid.appPackage, selendroid.appActivity);
            mocks.jwproxy.expects("command").once().withExactArgs("/status", "GET").returns(_Promise.resolve());
            mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_Promise.resolve());
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(selendroid.startSession(caps));

          case 7:
            mocks.adb.verify();
            mocks.jwproxy.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should wait for selendroid to respond to /status', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            mocks.jwproxy = S.sandbox.mock(selendroid.jwproxy);
            mocks.adb.expects("instrument").once().withArgs(selendroid.appPackage, selendroid.appActivity);
            mocks.jwproxy.expects("command").once().withExactArgs("/status", "GET").returns(_Promise.reject(new Error("nope")));
            mocks.jwproxy.expects("command").once().withExactArgs("/status", "GET").returns(_Promise.resolve());
            mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_Promise.resolve());
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(selendroid.startSession(caps));

          case 8:
            mocks.adb.verify();
            mocks.jwproxy.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9zZWxlbmRyb2lkLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztvQkFFaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7NkJBQ2hCLHNCQUFzQjs7Ozs2QkFDaEMsZ0JBQWdCOzs0QkFDVyxxQkFBcUI7O3lCQUNuRCxZQUFZOzs7O2lDQUNGLHFCQUFxQjs7QUFHL0Msa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixTQUFTLG1CQUFtQixHQUFjO01BQVosR0FBRyx5REFBRyxJQUFJOztBQUN0QyxNQUFJLENBQUMsR0FBRyxFQUFFO0FBQ1IsT0FBRyxHQUFHLDRCQUFTLENBQUM7R0FDakI7QUFDRCxTQUFPO0FBQ0wsT0FBRyxFQUFILEdBQUc7QUFDSCxjQUFVLEVBQUUsZUFBZTtBQUMzQixlQUFXLEVBQUUsZUFBZTtBQUM1QixVQUFNLEVBQUUsTUFBTTtBQUNkLE9BQUcsRUFBRSxrQkFBa0I7QUFDdkIsUUFBSSxFQUFFLFdBQVc7QUFDakIsY0FBVSxFQUFFLElBQUk7QUFDaEIsY0FBVSxFQUFFLElBQUk7R0FDakIsQ0FBQztDQUNIOztBQUVELFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxZQUFNO0FBQ2pDLE1BQUksR0FBRyxHQUFHLDRCQUFTLENBQUM7O0FBRXBCLFVBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtBQUM3QixNQUFFLENBQUMsOENBQThDLEVBQUUsWUFBTTtBQUN2RCxPQUFDLFlBQU07QUFDTCx3Q0FBc0IsQ0FBQztPQUN4QixDQUFBLENBQUUsTUFBTSxTQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUN6QyxPQUFDLFlBQU07QUFDTCx1Q0FBcUIsRUFBRSxDQUFDLENBQUM7T0FDMUIsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDekMsT0FBQyxZQUFNO0FBQ0wsdUNBQXFCLEVBQUMsR0FBRyxFQUFFLEtBQUss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QUFhLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUMvQixPQUFPLENBQUMsU0FBUSxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlDLGlCQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDcEMsYUFBYSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FDL0IsT0FBTyxDQUFDLFNBQVEsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUM5QixpQkFBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQ3BDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUMsbUJBQW1CLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FDOUQsT0FBTyxDQUFDLFNBQVEsT0FBTyxFQUFFLENBQUMsQ0FBQzs7NkNBQ3hCLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzs7QUFDbkMsaUJBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDbkIsaUJBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDeEIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L3NlbGVuZHJvaWQtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgU2VsZW5kcm9pZFNlcnZlciBmcm9tICcuLi8uLi9saWIvc2VsZW5kcm9pZCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IFNFX0FQS19QQVRILCBTRV9NQU5JRkVTVF9QQVRIIH0gZnJvbSAnLi4vLi4vbGliL2luc3RhbGxlcic7XG5pbXBvcnQgQURCIGZyb20gJ2FwcGl1bS1hZGInO1xuaW1wb3J0IHsgd2l0aE1vY2tzIH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZnVuY3Rpb24gYnVpbGRTZWxlbmRyb2lkT3B0cyAoYWRiID0gbnVsbCkge1xuICBpZiAoIWFkYikge1xuICAgIGFkYiA9IG5ldyBBREIoKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFkYixcbiAgICBhcHBQYWNrYWdlOiAnaW8uYXBwaXVtLmZvbycsXG4gICAgYXBwQWN0aXZpdHk6ICdTdGFydEFjdGl2aXR5JyxcbiAgICB0bXBEaXI6ICcvdG1wJyxcbiAgICBhcGs6ICcvcGF0aC90by9vdXIuYXBrJyxcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBzeXN0ZW1Qb3J0OiA0NTY3LFxuICAgIGRldmljZVBvcnQ6IDgwODAsXG4gIH07XG59XG5cbmRlc2NyaWJlKCdTZWxlbmRyb2lkU2VydmVyJywgKCkgPT4ge1xuICBsZXQgYWRiID0gbmV3IEFEQigpO1xuXG4gIGRlc2NyaWJlKCcjY29uc3RydWN0b3InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb21wbGFpbiBpZiByZXF1aXJlZCBvcHRpb25zIG5vdCBzZW50JywgKCkgPT4ge1xuICAgICAgKCgpID0+IHtcbiAgICAgICAgbmV3IFNlbGVuZHJvaWRTZXJ2ZXIoKTtcbiAgICAgIH0pLnNob3VsZC50aHJvdygvT3B0aW9uLiphZGIuKnJlcXVpcmVkLyk7XG4gICAgICAoKCkgPT4ge1xuICAgICAgICBuZXcgU2VsZW5kcm9pZFNlcnZlcih7fSk7XG4gICAgICB9KS5zaG91bGQudGhyb3coL09wdGlvbi4qYWRiLipyZXF1aXJlZC8pO1xuICAgICAgKCgpID0+IHtcbiAgICAgICAgbmV3IFNlbGVuZHJvaWRTZXJ2ZXIoe2FkYjogJ2Zvbyd9KTtcbiAgICAgIH0pLnNob3VsZC50aHJvdygvT3B0aW9uLiphcHBQYWNrYWdlLipyZXF1aXJlZC8pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnI3ByZXBhcmVNb2RpZmllZFNlcnZlcicsIHdpdGhNb2Nrcyh7YWRiLCBmc30sIChtb2NrcywgUykgPT4ge1xuICAgIGxldCBzZWxlbmRyb2lkID0gbmV3IFNlbGVuZHJvaWRTZXJ2ZXIoYnVpbGRTZWxlbmRyb2lkT3B0cyhhZGIpKTtcbiAgICBpdCgnc2hvdWxkIGJ1aWxkIGEgbW9kaWZpZWQgc2VydmVyIGlmIG9uZSBkb2VzbnQgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhzZWxlbmRyb2lkLm1vZFNlcnZlclBhdGgpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZShmYWxzZSkpO1xuICAgICAgLy8gc2hvdWxkIHVuaW5zdGFsbCB0aGUgYXBrIGlmIGl0J3MgcmVidWlsdFxuICAgICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJ1bmluc3RhbGxBcGtcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKHNlbGVuZHJvaWQubW9kU2VydmVyUGtnKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBtb2Nrcy5zZWxlbmRyb2lkID0gUy5zYW5kYm94Lm1vY2soc2VsZW5kcm9pZCk7XG4gICAgICAvLyBzaG91bGQgY2FsbCB0aGUgcmVidWlsZGluZyBtZXRob2RcbiAgICAgIG1vY2tzLnNlbGVuZHJvaWQuZXhwZWN0cyhcImJ1aWxkTmV3TW9kU2VydmVyXCIpLm9uY2UoKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICAvLyBzaG91bGQgY2hlY2sgY2VydHMgcmVnYXJkbGVzc1xuICAgICAgbW9ja3Muc2VsZW5kcm9pZC5leHBlY3RzKCdjaGVja0FuZFNpZ25DZXJ0Jykub25jZSgpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSh0cnVlKSk7XG4gICAgICBhd2FpdCBzZWxlbmRyb2lkLnByZXBhcmVNb2RpZmllZFNlcnZlcigpO1xuICAgICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgICBtb2Nrcy5hZGIudmVyaWZ5KCk7XG4gICAgICBtb2Nrcy5zZWxlbmRyb2lkLnZlcmlmeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGJ1aWxkIGEgbW9kaWZpZWQgc2VydmVyIGlmIG9uZSBkb2VzIGV4aXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cyhcImV4aXN0c1wiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3Moc2VsZW5kcm9pZC5tb2RTZXJ2ZXJQYXRoKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUodHJ1ZSkpO1xuICAgICAgLy8gc2hvdWxkIG5vdCB1bmluc3RhbGwgdGhlIGFwayBpZiBpdCdzIG5vdCByZWJ1aWx0XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInVuaW5zdGFsbEFwa1wiKS5uZXZlcigpO1xuICAgICAgbW9ja3Muc2VsZW5kcm9pZCA9IFMuc2FuZGJveC5tb2NrKHNlbGVuZHJvaWQpO1xuICAgICAgLy8gc2hvdWxkIG5vdCBjYWxsIHRoZSBidWlsZGluZyBtZXRob2RcbiAgICAgIG1vY2tzLnNlbGVuZHJvaWQuZXhwZWN0cyhcImJ1aWxkTmV3TW9kU2VydmVyXCIpLm5ldmVyKCk7XG4gICAgICAvLyBzaG91bGQgY2hlY2sgY2VydHMgcmVnYXJkbGVzc1xuICAgICAgbW9ja3Muc2VsZW5kcm9pZC5leHBlY3RzKFwiY2hlY2tBbmRTaWduQ2VydFwiKS5vbmNlKClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgc2VsZW5kcm9pZC5wcmVwYXJlTW9kaWZpZWRTZXJ2ZXIoKTtcbiAgICAgIG1vY2tzLmZzLnZlcmlmeSgpO1xuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgICAgbW9ja3Muc2VsZW5kcm9pZC52ZXJpZnkoKTtcbiAgICB9KTtcbiAgfSkpO1xuXG4gIGRlc2NyaWJlKCcjYnVpbGROZXdNb2RTZXJ2ZXInLCB3aXRoTW9ja3Moe2FkYiwgZnN9LCAobW9ja3MpID0+IHtcbiAgICBsZXQgc2VsZW5kcm9pZCA9IG5ldyBTZWxlbmRyb2lkU2VydmVyKGJ1aWxkU2VsZW5kcm9pZE9wdHMoYWRiKSk7XG4gICAgaXQoJ3Nob3VsZCBnbyB0aHJvdWdoIHRoZSBzdGVwcyB0byBjb21waWxlIGEgc2VydmVyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cyhcIm1rZGlyXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhgL3RtcC8ke3NlbGVuZHJvaWQuYXBwUGFja2FnZX1gKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiY29weUZpbGVcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFNFX01BTklGRVNUX1BBVEgsICcvdG1wL0FuZHJvaWRNYW5pZmVzdC54bWwnKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImluaXRBYXB0XCIpLm9uY2UoKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImNvbXBpbGVNYW5pZmVzdFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoJy90bXAvQW5kcm9pZE1hbmlmZXN0LnhtbCcsIHNlbGVuZHJvaWQubW9kU2VydmVyUGtnLFxuICAgICAgICAgICAgICAgICAgICAgICBzZWxlbmRyb2lkLmFwcFBhY2thZ2UpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgIG1vY2tzLmFkYi5leHBlY3RzKFwiaW5zZXJ0TWFuaWZlc3RcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKCcvdG1wL0FuZHJvaWRNYW5pZmVzdC54bWwnLCBTRV9BUEtfUEFUSCxcbiAgICAgICAgICAgICAgICAgICAgICAgc2VsZW5kcm9pZC5tb2RTZXJ2ZXJQYXRoKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBhd2FpdCBzZWxlbmRyb2lkLmJ1aWxkTmV3TW9kU2VydmVyKCk7XG4gICAgICBtb2Nrcy5mcy52ZXJpZnkoKTtcbiAgICAgIG1vY2tzLmFkYi52ZXJpZnkoKTtcbiAgICB9KTtcbiAgfSkpO1xuXG4gIGRlc2NyaWJlKCcjY2hlY2tBbmRTaWduQ2VydCcsIHdpdGhNb2Nrcyh7YWRifSwgKG1vY2tzKSA9PiB7XG4gICAgbGV0IHNlbGVuZHJvaWQgPSBuZXcgU2VsZW5kcm9pZFNlcnZlcihidWlsZFNlbGVuZHJvaWRPcHRzKGFkYikpO1xuICAgIGl0KCdzaG91bGQgY2hlY2sgYW5kIHNpZ24gYm90aCBhcGtzIGlmIG5laXRoZXIgYXJlIHNpZ25lZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tzLmFkYi5leHBlY3RzKFwiY2hlY2tBcGtDZXJ0XCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhzZWxlbmRyb2lkLm1vZFNlcnZlclBhdGgsIHNlbGVuZHJvaWQuYXBwUGFja2FnZSlcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKGZhbHNlKSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImNoZWNrQXBrQ2VydFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3Moc2VsZW5kcm9pZC5hcGssIHNlbGVuZHJvaWQuYXBwUGFja2FnZSlcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKGZhbHNlKSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNpZ25cIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKHNlbGVuZHJvaWQubW9kU2VydmVyUGF0aClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJzaWduXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhzZWxlbmRyb2lkLmFwaylcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgc2VsZW5kcm9pZC5jaGVja0FuZFNpZ25DZXJ0KHNlbGVuZHJvaWQubW9kU2VydmVyUGF0aCk7XG4gICAgICBhd2FpdCBzZWxlbmRyb2lkLmNoZWNrQW5kU2lnbkNlcnQoc2VsZW5kcm9pZC5hcGspO1xuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjaGVjayBhbmQgc2lnbiBvbmx5IG9uZSBhcGtzIGlmIG9uZSBpcyBzaWduZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImNoZWNrQXBrQ2VydFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3Moc2VsZW5kcm9pZC5tb2RTZXJ2ZXJQYXRoLCBzZWxlbmRyb2lkLmFwcFBhY2thZ2UpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZShmYWxzZSkpO1xuICAgICAgbW9ja3MuYWRiLmV4cGVjdHMoXCJjaGVja0Fwa0NlcnRcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKHNlbGVuZHJvaWQuYXBrLCBzZWxlbmRyb2lkLmFwcFBhY2thZ2UpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSh0cnVlKSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcInNpZ25cIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKHNlbGVuZHJvaWQubW9kU2VydmVyUGF0aClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgc2VsZW5kcm9pZC5jaGVja0FuZFNpZ25DZXJ0KHNlbGVuZHJvaWQubW9kU2VydmVyUGF0aCk7XG4gICAgICBhd2FpdCBzZWxlbmRyb2lkLmNoZWNrQW5kU2lnbkNlcnQoc2VsZW5kcm9pZC5hcGspO1xuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjaGVjayBhbmQgc2lnbiBuZWl0aGVyIGFwayBpZiBib3RoIGFyZSBzaWduZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImNoZWNrQXBrQ2VydFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3Moc2VsZW5kcm9pZC5tb2RTZXJ2ZXJQYXRoLCBzZWxlbmRyb2lkLmFwcFBhY2thZ2UpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSh0cnVlKSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImNoZWNrQXBrQ2VydFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3Moc2VsZW5kcm9pZC5hcGssIHNlbGVuZHJvaWQuYXBwUGFja2FnZSlcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKHRydWUpKTtcbiAgICAgIG1vY2tzLmFkYi5leHBlY3RzKFwic2lnblwiKS5uZXZlcigpO1xuICAgICAgYXdhaXQgc2VsZW5kcm9pZC5jaGVja0FuZFNpZ25DZXJ0KHNlbGVuZHJvaWQubW9kU2VydmVyUGF0aCk7XG4gICAgICBhd2FpdCBzZWxlbmRyb2lkLmNoZWNrQW5kU2lnbkNlcnQoc2VsZW5kcm9pZC5hcGspO1xuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgIH0pO1xuICB9KSk7XG5cbiAgZGVzY3JpYmUoJyNzdGFydFNlc3Npb24nLCB3aXRoTW9ja3Moe2FkYn0sIChtb2NrcywgUykgPT4ge1xuICAgIGxldCBzZWxlbmRyb2lkID0gbmV3IFNlbGVuZHJvaWRTZXJ2ZXIoYnVpbGRTZWxlbmRyb2lkT3B0cyhhZGIpKTtcbiAgICBpdCgnc2hvdWxkIHN0YXJ0IGluc3RydW1lbnRlZCBhcHAsIHdhaXQgZm9yIHN0YXR1cywgYW5kIHN0YXJ0IGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjYXBzID0ge2ZvbzogJ2Jhcid9O1xuICAgICAgbW9ja3Muandwcm94eSA9IFMuc2FuZGJveC5tb2NrKHNlbGVuZHJvaWQuandwcm94eSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImluc3RydW1lbnRcIikub25jZSgpXG4gICAgICAgIC53aXRoQXJncyhzZWxlbmRyb2lkLmFwcFBhY2thZ2UsIHNlbGVuZHJvaWQuYXBwQWN0aXZpdHkpO1xuICAgICAgbW9ja3Muandwcm94eS5leHBlY3RzKFwiY29tbWFuZFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoXCIvc3RhdHVzXCIsIFwiR0VUXCIpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgIG1vY2tzLmp3cHJveHkuZXhwZWN0cyhcImNvbW1hbmRcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFwiL3Nlc3Npb25cIiwgXCJQT1NUXCIsIHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzfSlcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgYXdhaXQgc2VsZW5kcm9pZC5zdGFydFNlc3Npb24oY2Fwcyk7XG4gICAgICBtb2Nrcy5hZGIudmVyaWZ5KCk7XG4gICAgICBtb2Nrcy5qd3Byb3h5LnZlcmlmeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3YWl0IGZvciBzZWxlbmRyb2lkIHRvIHJlc3BvbmQgdG8gL3N0YXR1cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBjYXBzID0ge2ZvbzogJ2Jhcid9O1xuICAgICAgbW9ja3Muandwcm94eSA9IFMuc2FuZGJveC5tb2NrKHNlbGVuZHJvaWQuandwcm94eSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cyhcImluc3RydW1lbnRcIikub25jZSgpXG4gICAgICAgIC53aXRoQXJncyhzZWxlbmRyb2lkLmFwcFBhY2thZ2UsIHNlbGVuZHJvaWQuYXBwQWN0aXZpdHkpO1xuICAgICAgbW9ja3Muandwcm94eS5leHBlY3RzKFwiY29tbWFuZFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoXCIvc3RhdHVzXCIsIFwiR0VUXCIpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIm5vcGVcIikpKTtcbiAgICAgIG1vY2tzLmp3cHJveHkuZXhwZWN0cyhcImNvbW1hbmRcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFwiL3N0YXR1c1wiLCBcIkdFVFwiKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBtb2Nrcy5qd3Byb3h5LmV4cGVjdHMoXCJjb21tYW5kXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhcIi9zZXNzaW9uXCIsIFwiUE9TVFwiLCB7ZGVzaXJlZENhcGFiaWxpdGllczogY2Fwc30pXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgIGF3YWl0IHNlbGVuZHJvaWQuc3RhcnRTZXNzaW9uKGNhcHMpO1xuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgICAgbW9ja3Muandwcm94eS52ZXJpZnkoKTtcbiAgICB9KTtcbiAgfSkpO1xufSk7XG4iXX0=