require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _appiumBaseDriverBuildTestBasedriver = require('appium-base-driver/build/test/basedriver');

var _ = require('../..');

var _helpers = require('./helpers');

var _contextTests = require('./context-tests');

var _contextTests2 = _interopRequireDefault(_contextTests);

var _findElementTests = require('./find-element-tests');

var _findElementTests2 = _interopRequireDefault(_findElementTests);

var _elementInteractionTests = require('./element-interaction-tests');

var _elementInteractionTests2 = _interopRequireDefault(_elementInteractionTests);

var _alertTests = require('./alert-tests');

var _alertTests2 = _interopRequireDefault(_alertTests);

var _generalTests = require('./general-tests');

var _generalTests2 = _interopRequireDefault(_generalTests);

_chai2['default'].use(_chaiAsPromised2['default']);

var should = _chai2['default'].should();
var shouldStartServer = process.env.USE_RUNNING_SERVER !== "0";

// test the same things as for base driver
(0, _appiumBaseDriverBuildTestBasedriver.baseDriverUnitTests)(_.FakeDriver, _helpers.DEFAULT_CAPS);
(0, _appiumBaseDriverBuildTestBasedriver.baseDriverE2ETests)(_.FakeDriver, _helpers.DEFAULT_CAPS);

describe('FakeDriver - via HTTP', function () {
  var server = null;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!shouldStartServer) {
            context$2$0.next = 4;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _.startServer)(_helpers.TEST_PORT, _helpers.TEST_HOST));

        case 3:
          server = context$2$0.sent;

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!server) {
            context$2$0.next = 3;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_bluebird2['default'].promisify(server.close.bind(server))());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  describe('session handling', function () {
    it('should start and stop a session', function callee$2$0() {
      var driver, _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.init(_helpers.DEFAULT_CAPS));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            should.exist(sessionId);
            sessionId.should.be.a('string');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.quit());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.title().should.eventually.be.rejectedWith(/terminated/));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('session-based tests', function () {
    (0, _contextTests2['default'])();
    (0, _findElementTests2['default'])();
    (0, _elementInteractionTests2['default'])();
    (0, _alertTests2['default'])();
    (0, _generalTests2['default'])();
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7d0JBRWMsVUFBVTs7OztvQkFDUCxNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztrQkFDOUIsSUFBSTs7OzttREFDcUMsMENBQTBDOztnQkFDMUQsT0FBTzs7dUJBQ0ksV0FBVzs7NEJBSXJDLGlCQUFpQjs7OztnQ0FDYixzQkFBc0I7Ozs7dUNBQ2YsNkJBQTZCOzs7OzBCQUMxQyxlQUFlOzs7OzRCQUNiLGlCQUFpQjs7OztBQU4xQyxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQVF6QixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUM3QixJQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEtBQUssR0FBRyxDQUFDOzs7QUFHakUsa0dBQTZDLENBQUM7QUFDOUMsaUdBQTRDLENBQUM7O0FBRTdDLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0FBQ3RDLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQztBQUNsQixRQUFNLENBQUM7Ozs7ZUFDRCxpQkFBaUI7Ozs7OzsyQ0FDSiwwREFBaUM7OztBQUFoRCxnQkFBTTs7Ozs7OztHQUVULENBQUMsQ0FBQztBQUNILE9BQUssQ0FBQzs7OztlQUNBLE1BQU07Ozs7OzsyQ0FDRixzQkFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTs7Ozs7OztHQUVqRCxDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDakMsTUFBRSxDQUFDLGlDQUFpQyxFQUFFO1VBQ2hDLE1BQU0sZUFDTCxTQUFTOzs7OztBQURWLGtCQUFNLEdBQUcsZ0JBQUcsa0JBQWtCLHdDQUFzQjs7NkNBQ2hDLE1BQU0sQ0FBQyxJQUFJLHVCQUFjOzs7OztBQUE1QyxxQkFBUzs7QUFDZCxrQkFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QixxQkFBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs2Q0FDMUIsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs2Q0FDYixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQzs7Ozs7OztLQUNyRSxDQUFDLENBQUM7R0FFSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLHFCQUFxQixFQUFFLFlBQU07QUFDcEMsb0NBQWMsQ0FBQztBQUNmLHdDQUFrQixDQUFDO0FBQ25CLCtDQUF5QixDQUFDO0FBQzFCLGtDQUFZLENBQUM7QUFDYixvQ0FBYyxDQUFDO0dBQ2hCLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2RyaXZlci1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgd2QgZnJvbSAnd2QnO1xuaW1wb3J0IHsgYmFzZURyaXZlckUyRVRlc3RzLCBiYXNlRHJpdmVyVW5pdFRlc3RzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyL2J1aWxkL3Rlc3QvYmFzZWRyaXZlcic7XG5pbXBvcnQgeyBGYWtlRHJpdmVyLCBzdGFydFNlcnZlciB9IGZyb20gJy4uLy4uJztcbmltcG9ydCB7IERFRkFVTFRfQ0FQUywgVEVTVF9IT1NULCBURVNUX1BPUlQgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmltcG9ydCBjb250ZXh0VGVzdHMgZnJvbSAnLi9jb250ZXh0LXRlc3RzJztcbmltcG9ydCBmaW5kRWxlbWVudFRlc3RzIGZyb20gJy4vZmluZC1lbGVtZW50LXRlc3RzJztcbmltcG9ydCBlbGVtZW50SW50ZXJhY3Rpb25UZXN0cyBmcm9tICcuL2VsZW1lbnQtaW50ZXJhY3Rpb24tdGVzdHMnO1xuaW1wb3J0IGFsZXJ0VGVzdHMgZnJvbSAnLi9hbGVydC10ZXN0cyc7XG5pbXBvcnQgZ2VuZXJhbFRlc3RzIGZyb20gJy4vZ2VuZXJhbC10ZXN0cyc7XG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jb25zdCBzaG91bGRTdGFydFNlcnZlciA9IHByb2Nlc3MuZW52LlVTRV9SVU5OSU5HX1NFUlZFUiAhPT0gXCIwXCI7XG5cbi8vIHRlc3QgdGhlIHNhbWUgdGhpbmdzIGFzIGZvciBiYXNlIGRyaXZlclxuYmFzZURyaXZlclVuaXRUZXN0cyhGYWtlRHJpdmVyLCBERUZBVUxUX0NBUFMpO1xuYmFzZURyaXZlckUyRVRlc3RzKEZha2VEcml2ZXIsIERFRkFVTFRfQ0FQUyk7XG5cbmRlc2NyaWJlKCdGYWtlRHJpdmVyIC0gdmlhIEhUVFAnLCAoKSA9PiB7XG4gIGxldCBzZXJ2ZXIgPSBudWxsO1xuICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzaG91bGRTdGFydFNlcnZlcikge1xuICAgICAgc2VydmVyID0gYXdhaXQgc3RhcnRTZXJ2ZXIoVEVTVF9QT1JULCBURVNUX0hPU1QpO1xuICAgIH1cbiAgfSk7XG4gIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICBpZiAoc2VydmVyKSB7XG4gICAgICBhd2FpdCBCLnByb21pc2lmeShzZXJ2ZXIuY2xvc2UuYmluZChzZXJ2ZXIpKSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Nlc3Npb24gaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzdGFydCBhbmQgc3RvcCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgZHJpdmVyID0gd2QucHJvbWlzZUNoYWluUmVtb3RlKFRFU1RfSE9TVCwgVEVTVF9QT1JUKTtcbiAgICAgIGxldCBbc2Vzc2lvbklkXSA9IGF3YWl0IGRyaXZlci5pbml0KERFRkFVTFRfQ0FQUyk7XG4gICAgICBzaG91bGQuZXhpc3Qoc2Vzc2lvbklkKTtcbiAgICAgIHNlc3Npb25JZC5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgICBhd2FpdCBkcml2ZXIucXVpdCgpO1xuICAgICAgYXdhaXQgZHJpdmVyLnRpdGxlKCkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC90ZXJtaW5hdGVkLyk7XG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Nlc3Npb24tYmFzZWQgdGVzdHMnLCAoKSA9PiB7XG4gICAgY29udGV4dFRlc3RzKCk7XG4gICAgZmluZEVsZW1lbnRUZXN0cygpO1xuICAgIGVsZW1lbnRJbnRlcmFjdGlvblRlc3RzKCk7XG4gICAgYWxlcnRUZXN0cygpO1xuICAgIGdlbmVyYWxUZXN0cygpO1xuICB9KTtcblxufSk7XG4iXX0=