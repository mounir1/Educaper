'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var IOSCrashLog = (function () {
  function IOSCrashLog(logDir) {
    _classCallCheck(this, IOSCrashLog);

    this.logDir = logDir || _path2['default'].resolve(process.env.HOME || '/', 'Library', 'Logs', 'DiagnosticReports');;
    this.prevLogs = [];
    this.logsSinceLastRequest = [];
  }

  _createClass(IOSCrashLog, [{
    key: 'getCrashes',
    value: function getCrashes() {
      return _regeneratorRuntime.async(function getCrashes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            return context$2$0.abrupt('return', _appiumSupport.fs.glob(this.logDir + '/*.crash'));

          case 4:
            context$2$0.prev = 4;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].errorAndThrow('There was a problem getting the crash list: ' + context$2$0.t0);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 4]]);
    }
  }, {
    key: 'filesToJSON',
    value: function filesToJSON(files) {
      return _regeneratorRuntime.async(function filesToJSON$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', (0, _asyncbox.asyncmap)(files, function callee$2$0(file) {
              var filename, stat;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    filename = _path2['default'].resolve(this.logDir, file);
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(filename));

                  case 3:
                    stat = context$3$0.sent;
                    context$3$0.t0 = stat.ctime;
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(filename, 'utf8'));

                  case 7:
                    context$3$0.t1 = context$3$0.sent;
                    return context$3$0.abrupt('return', {
                      timestamp: context$3$0.t0,
                      level: 'ALL',
                      message: context$3$0.t1
                    });

                  case 9:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startCapture',
    value: function startCapture() {
      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            this.prevLogs = context$2$0.sent;

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getLogs',

    // needed for consistent API with other logs
    value: function getLogs() {
      var crashFiles, diff;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            crashFiles = context$2$0.sent;
            diff = _lodash2['default'].difference(crashFiles, this.prevLogs, this.logsSinceLastRequest);

            this.logsSinceLastRequest = _lodash2['default'].union(this.logsSinceLastRequest, diff);
            return context$2$0.abrupt('return', this.filesToJSON(diff));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      var crashFiles, logFiles;
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            crashFiles = this.getCrashes();
            logFiles = _lodash2['default'].difference(crashFiles, this.prevLogs);
            return context$2$0.abrupt('return', this.filesToJSON(logFiles));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return IOSCrashLog;
})();

exports['default'] = IOSCrashLog;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pb3MtY3Jhc2gtbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O3NCQUNULFFBQVE7Ozs7NkJBQ0gsZ0JBQWdCOztzQkFDaEIsVUFBVTs7Ozt3QkFDSixVQUFVOztJQUc3QixXQUFXO0FBQ0gsV0FEUixXQUFXLENBQ0YsTUFBTSxFQUFFOzBCQURqQixXQUFXOztBQUViLFFBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7QUFDdkcsUUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztHQUNoQzs7ZUFMRyxXQUFXOztXQU9FOzs7OztnREFFTixrQkFBRyxJQUFJLENBQUksSUFBSSxDQUFDLE1BQU0sY0FBVzs7Ozs7O0FBRXhDLGdDQUFPLGFBQWEsaUVBQXNELENBQUM7Ozs7Ozs7S0FFOUU7OztXQUVpQixxQkFBQyxLQUFLOzs7Ozs7Z0RBQ2Ysd0JBQVMsS0FBSyxFQUFFLG9CQUFPLElBQUk7a0JBQzVCLFFBQVEsRUFDUixJQUFJOzs7O0FBREosNEJBQVEsR0FBRyxrQkFBSyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7O3FEQUM3QixrQkFBRyxJQUFJLENBQUMsUUFBUSxDQUFDOzs7QUFBOUIsd0JBQUk7cUNBRUssSUFBSSxDQUFDLEtBQUs7O3FEQUVOLGtCQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDOzs7OztBQUY1QywrQkFBUztBQUNULDJCQUFLLEVBQUUsS0FBSztBQUNaLDZCQUFPOzs7Ozs7OzthQUVWLENBQUM7Ozs7Ozs7S0FDSDs7O1dBRWtCOzs7Ozs2Q0FDSyxJQUFJLENBQUMsVUFBVSxFQUFFOzs7QUFBdkMsZ0JBQUksQ0FBQyxRQUFROzs7Ozs7O0tBQ2Q7OztXQUVpQjs7Ozs7Ozs7S0FFakI7Ozs7O1dBRWE7VUFDUixVQUFVLEVBQ1YsSUFBSTs7Ozs7NkNBRGUsSUFBSSxDQUFDLFVBQVUsRUFBRTs7O0FBQXBDLHNCQUFVO0FBQ1YsZ0JBQUksR0FBRyxvQkFBRSxVQUFVLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDOztBQUM3RSxnQkFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0RBQzlELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0tBQzlCOzs7V0FFZTtVQUNWLFVBQVUsRUFDVixRQUFROzs7O0FBRFIsc0JBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQzlCLG9CQUFRLEdBQUcsb0JBQUUsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO2dEQUMvQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztLQUNsQzs7O1NBOUNHLFdBQVc7OztxQkFpREYsV0FBVyIsImZpbGUiOiJsaWIvaW9zLWNyYXNoLWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBhc3luY21hcCB9IGZyb20gJ2FzeW5jYm94JztcblxuXG5jbGFzcyBJT1NDcmFzaExvZyB7XG4gIGNvbnN0cnVjdG9yIChsb2dEaXIpIHtcbiAgICB0aGlzLmxvZ0RpciA9IGxvZ0RpciB8fCBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSB8fCAnLycsICdMaWJyYXJ5JywgJ0xvZ3MnLCAnRGlhZ25vc3RpY1JlcG9ydHMnKTs7XG4gICAgdGhpcy5wcmV2TG9ncyA9IFtdO1xuICAgIHRoaXMubG9nc1NpbmNlTGFzdFJlcXVlc3QgPSBbXTtcbiAgfVxuXG4gIGFzeW5jIGdldENyYXNoZXMgKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnMuZ2xvYihgJHt0aGlzLmxvZ0Rpcn0vKi5jcmFzaGApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coYFRoZXJlIHdhcyBhIHByb2JsZW0gZ2V0dGluZyB0aGUgY3Jhc2ggbGlzdDogJHtlcnJ9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZmlsZXNUb0pTT04gKGZpbGVzKSB7XG4gICAgcmV0dXJuIGFzeW5jbWFwKGZpbGVzLCBhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgbGV0IGZpbGVuYW1lID0gcGF0aC5yZXNvbHZlKHRoaXMubG9nRGlyLCBmaWxlKTtcbiAgICAgIGxldCBzdGF0ID0gYXdhaXQgZnMuc3RhdChmaWxlbmFtZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0aW1lc3RhbXA6IHN0YXQuY3RpbWUsXG4gICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgbWVzc2FnZTogYXdhaXQgZnMucmVhZEZpbGUoZmlsZW5hbWUsICd1dGY4JylcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzdGFydENhcHR1cmUgKCkge1xuICAgIHRoaXMucHJldkxvZ3MgPSBhd2FpdCB0aGlzLmdldENyYXNoZXMoKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3BDYXB0dXJlICgpIHtcbiAgICAvLyBuZWVkZWQgZm9yIGNvbnNpc3RlbnQgQVBJIHdpdGggb3RoZXIgbG9nc1xuICB9XG5cbiAgYXN5bmMgZ2V0TG9ncyAoKSB7XG4gICAgbGV0IGNyYXNoRmlsZXMgPSBhd2FpdCB0aGlzLmdldENyYXNoZXMoKTtcbiAgICBsZXQgZGlmZiA9IF8uZGlmZmVyZW5jZShjcmFzaEZpbGVzLCB0aGlzLnByZXZMb2dzLCB0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0KTtcbiAgICB0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0ID0gXy51bmlvbih0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0LCBkaWZmKTtcbiAgICByZXR1cm4gdGhpcy5maWxlc1RvSlNPTihkaWZmKTtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MoKSB7XG4gICAgbGV0IGNyYXNoRmlsZXMgPSB0aGlzLmdldENyYXNoZXMoKTtcbiAgICBsZXQgbG9nRmlsZXMgPSBfLmRpZmZlcmVuY2UoY3Jhc2hGaWxlcywgdGhpcy5wcmV2TG9ncyk7XG4gICAgcmV0dXJuIHRoaXMuZmlsZXNUb0pTT04obG9nRmlsZXMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IElPU0NyYXNoTG9nO1xuIl19