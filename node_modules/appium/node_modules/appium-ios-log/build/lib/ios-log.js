'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _teen_process = require('teen_process');

// Date-Utils: Polyfills for the Date object
require('date-utils');

var START_TIMEOUT = 10000;
var DEVICE_CONSOLE_PATH = _path2['default'].resolve(__dirname, '..', '..', '..', 'build', 'deviceconsole');
var SYSTEM_LOG_PATH = '/var/log/system.log';

var IOSLog = (function () {
  function IOSLog(opts) {
    _classCallCheck(this, IOSLog);

    this.sim = opts.sim;
    this.udid = opts.udid;
    this.showLogs = !!opts.showLogs;

    this.proc = null;
    this.iosLogStartTime = null;
    this.loggingModeOn = true;
    this.logs = [];
    this.logRow = '';
    this.logsSinceLastRequest = [];

    // method to save the time of the first log
    this.logsStarted = _lodash2['default'].once(function () {
      this.iosLogStartTime = new Date();
    });
  }

  _createClass(IOSLog, [{
    key: 'startCaptureRealDevice',
    value: function startCaptureRealDevice() {
      var spawnEnv, idevicesyslog;
      return _regeneratorRuntime.async(function startCaptureRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.loggingModeOn = false;
            spawnEnv = _lodash2['default'].clone(process.env);

            _logger2['default'].debug('Attempting iOS device log capture via libimobiledevice idevicesyslog');
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevicesyslog'));

          case 6:
            idevicesyslog = context$2$0.sent;

            _logger2['default'].debug('Found idevicesyslog: \'' + idevicesyslog + '\'');
            this.proc = new _teen_process.SubProcess('idevicesyslog', ['-u', this.udid], { env: spawnEnv });
            context$2$0.next = 18;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](3);

            _logger2['default'].warn('Could not capture device log using libimobiledevice idevicesyslog. ' + 'Libimobiledevice is probably not installed');
            _logger2['default'].debug('Attempting iOS device log capture via deviceconsole');
            spawnEnv.PATH = process.env.PATH + ':' + DEVICE_CONSOLE_PATH;
            spawnEnv.DYLD_LIBRARY_PATH = DEVICE_CONSOLE_PATH + ':' + process.env.DYLD_LIBRARY_PATH;
            this.proc = new _teen_process.SubProcess('deviceconsole', ['-u', this.udid], { env: spawnEnv });

          case 18:
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 20:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 11]]);
    }
  }, {
    key: 'startCapture',
    value: function startCapture() {
      var xCodeVersion, logPath, systemLogPath, files, lastModifiedLogPath, lastModifiedLogTime, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, mtime;

      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.udid) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.startCaptureRealDevice());

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

          case 4:
            xCodeVersion = context$2$0.sent;
            context$2$0.t0 = _logger2['default'];
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.sim.getPlatformVersion());

          case 8:
            context$2$0.t1 = context$2$0.sent;
            context$2$0.t2 = 'Starting iOS ' + context$2$0.t1;
            context$2$0.t3 = context$2$0.t2 + ' simulator log capture';
            context$2$0.t0.debug.call(context$2$0.t0, context$2$0.t3);

            if (!(xCodeVersion.major < 5)) {
              context$2$0.next = 17;
              break;
            }

            this.proc = new _teen_process.SubProcess('tail', ['-f', '-n', '1', SYSTEM_LOG_PATH]);
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 16:
            return context$2$0.abrupt('return');

          case 17:

            // this is xcode 6+
            if (_lodash2['default'].isUndefined(this.sim.udid)) {
              _logger2['default'].errorAndThrow('iOS ' + xCodeVersion.versionString + ' log capture requires a sim udid');
            }

            logPath = this.sim.getLogDir();
            context$2$0.prev = 19;

            if (!(logPath.indexOf('*') >= 0)) {
              context$2$0.next = 23;
              break;
            }

            _logger2['default'].error('Log path has * in it. Unable to start log capture: ' + logPath);
            return context$2$0.abrupt('return');

          case 23:
            systemLogPath = _path2['default'].resolve(logPath, 'system.log');

            _logger2['default'].debug('System log path: ' + systemLogPath);
            context$2$0.next = 27;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(logPath));

          case 27:
            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(systemLogPath, 'A new Appium session is about to start!\n', { flag: 'a' }));

          case 29:
            files = undefined;
            context$2$0.prev = 30;
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.glob(systemLogPath));

          case 33:
            files = context$2$0.sent;

            if (!(files.length < 1)) {
              context$2$0.next = 36;
              break;
            }

            throw new Error('Could not start log capture');

          case 36:
            context$2$0.next = 41;
            break;

          case 38:
            context$2$0.prev = 38;
            context$2$0.t4 = context$2$0['catch'](30);

            _logger2['default'].error('Could not start log capture because no iOS ' + ('simulator logs could be found at ' + systemLogPath + '. ') + 'Logging will not be functional for this run');

          case 41:
            lastModifiedLogPath = files[0];
            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(lastModifiedLogPath).mtime);

          case 44:
            lastModifiedLogTime = context$2$0.sent;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 48;
            _iterator = _getIterator(files);

          case 50:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 59;
              break;
            }

            file = _step.value;
            context$2$0.next = 54;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(file).mtime);

          case 54:
            mtime = context$2$0.sent;

            if (mtime > lastModifiedLogTime) {
              lastModifiedLogPath = file;
              lastModifiedLogTime = mtime;
            }

          case 56:
            _iteratorNormalCompletion = true;
            context$2$0.next = 50;
            break;

          case 59:
            context$2$0.next = 65;
            break;

          case 61:
            context$2$0.prev = 61;
            context$2$0.t5 = context$2$0['catch'](48);
            _didIteratorError = true;
            _iteratorError = context$2$0.t5;

          case 65:
            context$2$0.prev = 65;
            context$2$0.prev = 66;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 68:
            context$2$0.prev = 68;

            if (!_didIteratorError) {
              context$2$0.next = 71;
              break;
            }

            throw _iteratorError;

          case 71:
            return context$2$0.finish(68);

          case 72:
            return context$2$0.finish(65);

          case 73:
            this.proc = new _teen_process.SubProcess('tail', ['-f', '-n', '1', lastModifiedLogPath]);
            context$2$0.next = 76;
            return _regeneratorRuntime.awrap(this.finishStartingLogCapture());

          case 76:
            context$2$0.next = 81;
            break;

          case 78:
            context$2$0.prev = 78;
            context$2$0.t6 = context$2$0['catch'](19);

            _logger2['default'].errorAndThrow('System log capture failed: ' + context$2$0.t6.message);

          case 81:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[19, 78], [30, 38], [48, 61, 65, 73], [66,, 68, 72]]);
    }
  }, {
    key: 'finishStartingLogCapture',
    value: function finishStartingLogCapture() {
      var firstLine, sd;
      return _regeneratorRuntime.async(function finishStartingLogCapture$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.proc) {
              _logger2['default'].errorAndThrow('Could not capture device log');
            }
            firstLine = true;

            this.proc.on('output', function (stdout, stderr) {
              if (stdout) {
                if (firstLine) {
                  if (stdout.substr(-1, 1) === '\n') {
                    // don't store the first line of the log because it came before the sim or device was launched
                    firstLine = false;
                  }
                } else {
                  _this.logRow += stdout;
                  if (stdout.substr(-1, 1) === '\n') {
                    _this.onOutput();
                    _this.logRow = '';
                  }
                }
              }
              if (stderr) {
                _this.onOutput('STDERR');
              }
            });

            sd = function sd(stdout, stderr) {
              if (/execvp\(\)/.test(stderr)) {
                throw new Error('iOS log capture process failed to start');
              }
              return stdout || stderr;
            };

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.proc.start(sd, START_TIMEOUT));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Stopping iOS log capture');

            if (!this.proc) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.proc.stop());

          case 4:
            this.proc = null;

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'onOutput',
    value: function onOutput() {
      var prefix = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      this.logsStarted();

      var logs = this.logRow.split('\n');
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = _getIterator(logs), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var log = _step2.value;

          if (log) {
            if (!this.loggingModeOn) {
              // figure out if this log row marks the beginning of our log capture or not
              var logRowParts = log.split(/\s+/);
              var logRowDate = new Date(this.iosLogStartTime.getFullYear() + ' ' + logRowParts[0] + ' ' + logRowParts[1] + ' ' + logRowParts[2]);
              if (logRowDate.isAfter(this.iosLogStartTime)) {
                this.loggingModeOn = true;
              }
            }
            if (this.loggingModeOn) {
              var logObj = {
                timestamp: Date.now(),
                level: 'ALL',
                message: log
              };
              this.logs.push(logObj);
              this.logsSinceLastRequest.push(logObj);
              if (this.showLogs) {
                var space = prefix.length > 0 ? ' ' : '';
                _logger2['default'].info('[IOS_SYSLOG_ROW' + space + prefix + '] ' + log);
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'getLogs',
    value: function getLogs() {
      var ret;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            ret = this.logsSinceLastRequest;

            this.logsSinceLastRequest = [];
            return context$2$0.abrupt('return', ret);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', this.logs);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return IOSLog;
})();

exports['default'] = IOSLog;
module.exports = exports['default'];
// if we have a real device

// otherwise, if we have a simulator...
//# sourceMappingURL=data:application/json;base64,