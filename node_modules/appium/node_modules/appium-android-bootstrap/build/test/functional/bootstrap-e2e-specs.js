// transpile :mocha

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ = require('../..');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumBaseDriver = require('appium-base-driver');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Android Bootstrap', function () {
  var _this = this;

  this.timeout(60000);
  var adb = undefined,
      androidBootstrap = undefined;
  var rootDir = _path2['default'].resolve(__dirname, process.env.NO_PRECOMPILE ? '../..' : '../../..');
  var apiDemos = _path2['default'].resolve(rootDir, 'test', 'fixtures', 'ApiDemos-debug.apk');
  var systemPort = 4724;
  before(function callee$1$0() {
    var packageName, activityName;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumAdb2['default'].createADB());

        case 2:
          adb = context$2$0.sent;
          packageName = 'io.appium.android.apis', activityName = '.ApiDemos';
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.install(apiDemos));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(adb.startApp({ pkg: packageName,
            activity: activityName }));

        case 8:
          androidBootstrap = new _.AndroidBootstrap(adb, systemPort);
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(androidBootstrap.start('io.appium.android.apis', false));

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(androidBootstrap.shutdown());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it("sendAction should work", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(androidBootstrap.sendAction('wake'));

        case 2:
          context$2$0.sent.should.equal(true);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it("sendCommand should work", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(androidBootstrap.sendCommand(_.COMMAND_TYPES.ACTION, { action: 'getDataDir' }));

        case 2:
          context$2$0.sent.should.equal("/data");

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it("sendCommand should correctly throw error", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(androidBootstrap.sendCommand(_.COMMAND_TYPES.ACTION, { action: 'unknown' }).should.eventually.be.rejectedWith(_appiumBaseDriver.errors.UnknownCommandError));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it("should cancel onUnexpectedShutdown promise on unexpected uiAutomator shutdown", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(androidBootstrap.sendCommand(_.COMMAND_TYPES.SHUTDOWN));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(androidBootstrap.onUnexpectedShutdown.should.eventually.be.rejectedWith("Error: UiAUtomator shut down unexpectedly"));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9ib290c3RyYXAtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUVpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztvQkFDNUIsTUFBTTs7OztnQkFDeUIsT0FBTzs7eUJBQ3ZDLFlBQVk7Ozs7Z0NBQ0wsb0JBQW9COztBQUczQyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZOzs7QUFDeEMsTUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQixNQUFJLEdBQUcsWUFBQTtNQUFFLGdCQUFnQixZQUFBLENBQUM7QUFDMUIsTUFBSSxPQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxPQUFPLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFDN0UsTUFBTSxRQUFRLEdBQUcsa0JBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDakYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLFFBQU0sQ0FBQztRQUVDLFdBQVcsRUFDWCxZQUFZOzs7OzsyQ0FGTix1QkFBSSxTQUFTLEVBQUU7OztBQUEzQixhQUFHO0FBQ0cscUJBQVcsR0FBRyx3QkFBd0IsRUFDdEMsWUFBWSxHQUFHLFdBQVc7OzJDQUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQzs7OzsyQ0FDckIsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFDLEdBQUcsRUFBRSxXQUFXO0FBQ2hCLG9CQUFRLEVBQUUsWUFBWSxFQUFDLENBQUM7OztBQUM1QywwQkFBZ0IsR0FBRyx1QkFBcUIsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDOzsyQ0FDbkQsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLHdCQUF3QixFQUFFLEtBQUssQ0FBQzs7Ozs7OztHQUM5RCxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7OzJDQUNFLGdCQUFnQixDQUFDLFFBQVEsRUFBRTs7Ozs7OztHQUNsQyxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsd0JBQXdCLEVBQUU7Ozs7OzJDQUNwQixnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDOzs7MkJBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7Ozs7O0dBQzlELENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx5QkFBeUIsRUFBRTs7Ozs7MkNBQ3RCLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxnQkFBYyxNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsWUFBWSxFQUFDLENBQUM7OzsyQkFBRSxNQUFNLENBQ3RGLEtBQUssQ0FBQyxPQUFPOzs7Ozs7O0dBQ2hCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywwQ0FBMEMsRUFBRTs7Ozs7MkNBQ3hDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxnQkFBYyxNQUFNLEVBQUUsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQyxNQUFNLENBQ2pGLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHlCQUFPLG1CQUFtQixDQUFDOzs7Ozs7O0dBQ3pELENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywrRUFBK0UsRUFBRTs7Ozs7MkNBQzVFLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxnQkFBYyxRQUFRLENBQUM7Ozs7MkNBQ3BELGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQzFELEVBQUUsQ0FBQyxZQUFZLENBQUMsMkNBQTJDLENBQUM7Ozs7Ozs7R0FDaEUsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9ib290c3RyYXAtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlIDptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQW5kcm9pZEJvb3RzdHJhcCwgQ09NTUFORF9UWVBFUyB9IGZyb20gJy4uLy4uJztcbmltcG9ydCBBREIgZnJvbSAnYXBwaXVtLWFkYic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdBbmRyb2lkIEJvb3RzdHJhcCcsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KDYwMDAwKTtcbiAgbGV0IGFkYiwgYW5kcm9pZEJvb3RzdHJhcDtcbiAgbGV0IHJvb3REaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT19QUkVDT01QSUxFID8gJy4uLy4uJyA6ICcuLi8uLi8uLicpO1xuICBjb25zdCBhcGlEZW1vcyA9IHBhdGgucmVzb2x2ZShyb290RGlyLCAndGVzdCcsICdmaXh0dXJlcycsICdBcGlEZW1vcy1kZWJ1Zy5hcGsnKTtcbiAgY29uc3Qgc3lzdGVtUG9ydCA9IDQ3MjQ7XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgYWRiID0gYXdhaXQgQURCLmNyZWF0ZUFEQigpO1xuICAgIGNvbnN0IHBhY2thZ2VOYW1lID0gJ2lvLmFwcGl1bS5hbmRyb2lkLmFwaXMnLFxuICAgICAgICAgIGFjdGl2aXR5TmFtZSA9ICcuQXBpRGVtb3MnO1xuICAgIGF3YWl0IGFkYi5pbnN0YWxsKGFwaURlbW9zKTtcbiAgICBhd2FpdCBhZGIuc3RhcnRBcHAoe3BrZzogcGFja2FnZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eTogYWN0aXZpdHlOYW1lfSk7XG4gICAgYW5kcm9pZEJvb3RzdHJhcCA9IG5ldyBBbmRyb2lkQm9vdHN0cmFwKGFkYiwgc3lzdGVtUG9ydCk7XG4gICAgYXdhaXQgYW5kcm9pZEJvb3RzdHJhcC5zdGFydCgnaW8uYXBwaXVtLmFuZHJvaWQuYXBpcycsIGZhbHNlKTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jICgpPT4ge1xuICAgIGF3YWl0IGFuZHJvaWRCb290c3RyYXAuc2h1dGRvd24oKTtcbiAgfSk7XG4gIGl0KFwic2VuZEFjdGlvbiBzaG91bGQgd29ya1wiLCBhc3luYyAoKSA9PiB7XG4gICAgKGF3YWl0IGFuZHJvaWRCb290c3RyYXAuc2VuZEFjdGlvbignd2FrZScpKS5zaG91bGQuZXF1YWwodHJ1ZSk7XG4gIH0pO1xuICBpdChcInNlbmRDb21tYW5kIHNob3VsZCB3b3JrXCIsIGFzeW5jICgpID0+IHtcbiAgIChhd2FpdCBhbmRyb2lkQm9vdHN0cmFwLnNlbmRDb21tYW5kKENPTU1BTkRfVFlQRVMuQUNUSU9OLCB7YWN0aW9uOiAnZ2V0RGF0YURpcid9KSkuc2hvdWxkXG4gICAgIC5lcXVhbChcIi9kYXRhXCIpO1xuICB9KTtcbiAgaXQoXCJzZW5kQ29tbWFuZCBzaG91bGQgY29ycmVjdGx5IHRocm93IGVycm9yXCIsIGFzeW5jICgpID0+IHtcbiAgIGF3YWl0IGFuZHJvaWRCb290c3RyYXAuc2VuZENvbW1hbmQoQ09NTUFORF9UWVBFUy5BQ1RJT04sIHthY3Rpb246ICd1bmtub3duJ30pLnNob3VsZFxuICAgICAuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IpO1xuICB9KTtcbiAgaXQoXCJzaG91bGQgY2FuY2VsIG9uVW5leHBlY3RlZFNodXRkb3duIHByb21pc2Ugb24gdW5leHBlY3RlZCB1aUF1dG9tYXRvciBzaHV0ZG93blwiLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYW5kcm9pZEJvb3RzdHJhcC5zZW5kQ29tbWFuZChDT01NQU5EX1RZUEVTLlNIVVRET1dOKTtcbiAgICBhd2FpdCBhbmRyb2lkQm9vdHN0cmFwLm9uVW5leHBlY3RlZFNodXRkb3duLnNob3VsZC5ldmVudHVhbGx5XG4gICAgICAuYmUucmVqZWN0ZWRXaXRoKFwiRXJyb3I6IFVpQVV0b21hdG9yIHNodXQgZG93biB1bmV4cGVjdGVkbHlcIik7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
