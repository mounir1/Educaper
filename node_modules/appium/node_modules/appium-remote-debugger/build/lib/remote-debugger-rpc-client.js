// jshint ignore: start
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bplistCreator = require('bplist-creator');

var _bplistCreator2 = _interopRequireDefault(_bplistCreator);

var _bplistParser = require('bplist-parser');

var _bplistParser2 = _interopRequireDefault(_bplistParser);

var _bufferpack = require('bufferpack');

var _bufferpack2 = _interopRequireDefault(_bufferpack);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _remoteDebugger = require('./remote-debugger');

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _remoteDebuggerMessageHandler = require('./remote-debugger-message-handler');

var _remoteDebuggerMessageHandler2 = _interopRequireDefault(_remoteDebuggerMessageHandler);

var _remoteMessages = require('./remote-messages');

var _remoteMessages2 = _interopRequireDefault(_remoteMessages);

var _helpers = require('./helpers');

var RemoteDebuggerRpcClient = (function () {
  function RemoteDebuggerRpcClient(host) {
    var port = arguments.length <= 1 || arguments[1] === undefined ? _remoteDebugger.REMOTE_DEBUGGER_PORT : arguments[1];
    var specialMessageHandlers = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    _classCallCheck(this, RemoteDebuggerRpcClient);

    // socket and connection configuration
    this.socket = null;
    this.host = host;
    this.port = port;
    this.connected = false;
    this.connId = _nodeUuid2['default'].v4();
    this.senderId = _nodeUuid2['default'].v4();
    this.curMsgId = 0;
    this.received = new Buffer(0);
    this.readPos = 0;

    // message handlers
    this.specialMessageHandlers = specialMessageHandlers;
    this.messageHandler = null;
  }

  _createClass(RemoteDebuggerRpcClient, [{
    key: 'connect',
    value: function connect() {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.messageHandler = new _remoteDebuggerMessageHandler2['default'](this.specialMessageHandlers);

            // create socket and handle its messages
            this.socket = new _net2['default'].Socket({ type: 'tcp6' });
            this.socket.setNoDelay(true);
            this.socket.on('close', function () {
              if (_this.connected) {
                _logger2['default'].debug('Debugger socket disconnected');
              }
              _this.connected = false;
              _this.socket = null;
            });
            this.socket.on('end', function () {
              _this.connected = false;
            });
            this.socket.on('data', this.receive.bind(this));

            // connect the socket
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    // only resolve this function when we are actually connected
                    this.socket.connect(this.port, '::1');
                    this.socket.on('connect', function callee$3$0() {
                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            _logger2['default'].debug('Debugger socket connected to ' + this.socket.remoteAddress + ':' + this.socket.remotePort);
                            this.connected = true;

                            resolve();

                          case 3:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this2);
                    });
                    this.socket.on('error', function (exception) {
                      if (_this2.connected) {
                        _logger2['default'].error('Socket error: ' + exception.message);
                        _this2.connected = false;
                      }

                      // the connection was refused, so reject the connect promise
                      reject(exception);
                    });

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      return _regeneratorRuntime.async(function disconnect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.isConnected()) {
              _logger2['default'].debug('Disconnecting from remote debugger');
              this.socket.destroy();
            }
            this.connected = false;

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this.connected;
    }
  }, {
    key: 'setSpecialMessageHandler',
    value: function setSpecialMessageHandler(key, errorHandler, handler) {
      this.messageHandler.setSpecialMessageHandler(key, errorHandler, handler);
    }
  }, {
    key: 'getSpecialMessageHandler',
    value: function getSpecialMessageHandler(key) {
      return this.messageHandler.getSpecialMessageHandler(key);
    }
  }, {
    key: 'setDataMessageHandler',
    value: function setDataMessageHandler(key, errorHandler, handler) {
      this.messageHandler.setDataMessageHandler(key, errorHandler, handler);
    }
  }, {
    key: 'allowNavigationWithoutReload',
    value: function allowNavigationWithoutReload() {
      var allow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      this.messageHandler.allowNavigationWithoutReload(allow);
    }
  }, {
    key: 'selectApp',
    value: function selectApp(appIdKey, applicationConnectedHandler) {
      return _regeneratorRuntime.async(function selectApp$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var onAppChange, _ref, _ref2, connectedAppIdKey, pageDict, msg;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this3 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    onAppChange = function onAppChange(dict) {
                      var oldAppIdKey, correctAppIdKey;
                      return _regeneratorRuntime.async(function onAppChange$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            oldAppIdKey = dict.WIRHostApplicationIdentifierKey;
                            correctAppIdKey = dict.WIRApplicationIdentifierKey;

                            // if this is a report of a proxy redirect from the remote debugger
                            // we want to update our dictionary and get a new app id
                            if (oldAppIdKey && correctAppIdKey !== oldAppIdKey) {
                              _logger2['default'].debug('We were notified we might have connected to the wrong app. ' + ('Using id ' + correctAppIdKey + ' instead of ' + oldAppIdKey));
                            }

                            applicationConnectedHandler(dict);
                            reject('New application has connected');

                          case 5:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this3);
                    };

                    this.setSpecialMessageHandler('_rpc_applicationConnected:', reject, onAppChange);

                    // do the actual connecting to the app
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.send('connectToApp', {
                      appIdKey: appIdKey
                    }));

                  case 4:
                    _ref = context$3$0.sent;
                    _ref2 = _slicedToArray(_ref, 2);
                    connectedAppIdKey = _ref2[0];
                    pageDict = _ref2[1];

                    // sometimes the connect logic happens, but with an empty dictionary
                    // which leads to the remote debugger getting disconnected, and into a loop
                    if (_lodash2['default'].isEmpty(pageDict)) {
                      msg = 'Empty page dictionary received';

                      _logger2['default'].debug(msg);
                      reject(new Error(msg));
                    } else {
                      resolve([connectedAppIdKey, pageDict]);
                    }

                  case 9:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this4);
            })['finally'](function () {
              // no matter what, we want to restore the handler that was changed.
              _this4.setSpecialMessageHandler('_rpc_applicationConnected:', null, applicationConnectedHandler);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'send',
    value: function send(command) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var onSocketError;
      return _regeneratorRuntime.async(function send$(context$2$0) {
        var _this6 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            onSocketError = undefined;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var data, socketCb, plist, msg;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this5 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    // promise to be resolved whenever remote debugger
                    // replies to our request

                    // retrieve the correct command to send
                    opts = _lodash2['default'].defaults({ connId: this.connId, senderId: this.senderId }, opts);
                    data = (0, _remoteMessages2['default'])(command, opts);
                    socketCb = _lodash2['default'].noop;

                    // handle socket problems
                    onSocketError = function (exception) {
                      if (_this5.connected) {
                        _logger2['default'].error('Socket error: ' + exception.message);
                      }

                      // the connection was refused, so reject the connect promise
                      reject(exception);
                    };
                    this.socket.on('error', onSocketError);
                    if (this.messageHandler.hasSpecialMessageHandler(data.__selector)) {
                      (function () {
                        // special replies will return any number of arguments
                        // temporarily wrap with promise handling
                        var specialMessageHandler = _this5.getSpecialMessageHandler(data.__selector);
                        _this5.setSpecialMessageHandler(data.__selector, reject, (function () {
                          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                          }

                          _logger2['default'].debug('Received response from socket send: \'' + _lodash2['default'].truncate(JSON.stringify(args), { length: 50 }) + '\'');

                          // call the original listener, and put it back, if necessary
                          specialMessageHandler.apply(undefined, args);
                          if (this.messageHandler.hasSpecialMessageHandler(data.__selector)) {
                            // this means that the system has not removed this listener
                            this.setSpecialMessageHandler(data.__selector, null, specialMessageHandler);
                          }

                          resolve(args);
                        }).bind(_this5));
                      })();
                    } else if (data.__argument && data.__argument.WIRSocketDataKey) {
                      // keep track of the messages coming and going using
                      // a simple sequential id
                      this.curMsgId++;
                      this.setDataMessageHandler(this.curMsgId.toString(), reject, function (value) {
                        var msg = _lodash2['default'].truncate(_lodash2['default'].isString(value) ? value : JSON.stringify(value), { length: 50 });
                        _logger2['default'].debug('Received data response from socket send: \'' + msg + '\'');
                        _logger2['default'].debug('Original command: ' + command);
                        resolve(value);
                      });
                      data.__argument.WIRSocketDataKey.id = this.curMsgId;
                      data.__argument.WIRSocketDataKey = new Buffer(JSON.stringify(data.__argument.WIRSocketDataKey));
                    } else {
                      // we want to immediately resolve this socket.write
                      // any long term callbacks will do their business in the background
                      socketCb = resolve;
                    }

                    _logger2['default'].debug('Sending \'' + data.__selector + '\' message to remote debugger');

                    // remote debugger expects a binary plist as data
                    plist = undefined;
                    context$3$0.prev = 8;

                    plist = (0, _bplistCreator2['default'])(data);
                    context$3$0.next = 17;
                    break;

                  case 12:
                    context$3$0.prev = 12;
                    context$3$0.t0 = context$3$0['catch'](8);
                    msg = 'Could not create binary plist from data: ' + context$3$0.t0.message;

                    _logger2['default'].error(msg);
                    return context$3$0.abrupt('return', reject(new Error(msg)));

                  case 17:

                    if (this.socket && this.connected) {
                      // cork and uncork in order to not buffer the write
                      // on some systems this is necessary or the server
                      // gets confused.
                      this.socket.cork();
                      this.socket.write(_bufferpack2['default'].pack('L', [plist.length]));
                      this.socket.write(plist, socketCb);
                      this.socket.uncork();
                    } else {
                      msg = 'Attempted to write data to socket after it was closed!';

                      _logger2['default'].error(msg);
                      reject(new Error(msg));
                    }

                  case 18:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this6, [[8, 12]]);
            })['finally'](function () {
              // remove this listener, so we don't exhaust the system
              _this6.socket.removeListener('error', onSocketError);
            }));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'receive',
    value: function receive(data) {
      // Append this new data to the existing Buffer
      this.received = Buffer.concat([this.received, data]);
      var dataLeftOver = true;

      // Parse multiple messages in the same packet
      while (dataLeftOver) {
        // Store a reference to where we were
        var oldReadPos = this.readPos;

        // Read the prefix (plist length) to see how far to read next
        // It's always 4 bytes long
        var prefix = this.received.slice(this.readPos, this.readPos + 4);

        var msgLength = undefined;
        try {
          msgLength = _bufferpack2['default'].unpack('L', prefix)[0];
        } catch (e) {
          _logger2['default'].error('Buffer could not unpack: ' + e);
          return;
        }

        // Jump forward 4 bytes
        this.readPos += 4;

        // Is there enough data here?
        // If not, jump back to our original position and gtfo
        if (this.received.length < msgLength + this.readPos) {
          this.readPos = oldReadPos;
          break;
        }

        // Extract the main body of the message (where the plist should be)
        var body = this.received.slice(this.readPos, msgLength + this.readPos);

        // Extract the plist
        var plist = undefined;
        try {
          plist = _bplistParser2['default'].parseBuffer(body);
        } catch (e) {
          _logger2['default'].error('Error parsing binary plist: ' + e);
          return;
        }

        // bplistParse.parseBuffer returns an array
        if (plist.length === 1) {
          plist = plist[0];
        }

        var _arr = ['WIRMessageDataKey', 'WIRDestinationKey', 'WIRSocketDataKey'];
        for (var _i = 0; _i < _arr.length; _i++) {
          var key = _arr[_i];
          if (!_lodash2['default'].isUndefined(plist[key])) {
            plist[key] = plist[key].toString("utf8");
          }
        }

        if (plist.__selector === "_rpc_applicationSentData:") {
          _logger2['default'].debug('Received applicationSentData response');
        } else {
          _logger2['default'].debug('Receiving data from remote debugger: \'' + (0, _helpers.simpleStringify)(plist) + '\'');
        }

        // Jump forward the length of the plist
        this.readPos += msgLength;

        // Calculate how much buffer is left
        var leftOver = this.received.length - this.readPos;

        // Is there some left over?
        if (leftOver !== 0) {
          // Copy what's left over into a new buffer, and save it for next time
          var chunk = new Buffer(leftOver);
          this.received.copy(chunk, 0, this.readPos);
          this.received = chunk;
        } else {
          // Otherwise, empty the buffer and get out of the loop
          this.received = new Buffer(0);
          dataLeftOver = false;
        }

        // Reset the read position
        this.readPos = 0;

        // Now do something with the plist
        if (plist) {
          this.messageHandler.handleMessage(plist);
        }
      }
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
      this.messageHandler.setTimelineEventHandler(timelineEventHandler);
    }
  }]);

  return RemoteDebuggerRpcClient;
})();

exports['default'] = RemoteDebuggerRpcClient;
module.exports = exports['default'];

// local callback, temporarily added as callback to
// `_rpc_applicationConnected:` remote debugger response
// to handle the initial connection

// from the dictionary returned, get the ids

// error listener, which needs to be removed after the promise is resolved

// most of the time we don't care when socket.write does
// so give it an empty function
//# sourceMappingURL=data:application/json;base64,