{
  "name": "appium-xcuitest-driver",
  "description": "Appium driver for iOS using XCUITest for backend",
  "keywords": [
    "appium",
    "ios",
    "webdriveragent",
    "xcuitest",
    "xctest"
  ],
  "version": "2.3.0",
  "author": {
    "name": "appium"
  },
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-xcuitest-driver.git"
  },
  "bugs": {
    "url": "https://github.com/appium/appium-xcuitest-driver/issues"
  },
  "engines": [
    "node"
  ],
  "main": "./build/index.js",
  "bin": {},
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "appium-base-driver": "^2.0.19",
    "appium-ios-driver": "^1.12.21",
    "appium-ios-log": "^1.2.0",
    "appium-ios-simulator": "^1.9.0",
    "appium-logger": "^2.0.0",
    "appium-remote-debugger": "^3.1.4",
    "appium-support": "^2.3.2",
    "appium-xcode": "^3.1.0",
    "asyncbox": "^2.3.1",
    "babel-runtime": "=5.8.24",
    "bluebird": "^3.1.1",
    "ios-app-utils": "^1.0.0",
    "js2xmlparser2": "^0.2.0",
    "lodash": "^4.0.0",
    "node-simctl": "^3.1.0",
    "source-map-support": "^0.4.0",
    "teen_process": "^1.7.1",
    "yargs": "^3.32.0"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp",
    "precommit-msg": "echo 'Pre-commit checks...' && exit 0",
    "lint": "gulp eslint"
  },
  "pre-commit": [
    "precommit-msg",
    "lint",
    "test"
  ],
  "devDependencies": {
    "appium-gulp-plugins": "^1.2.12",
    "appium-test-support": "0.0.5",
    "babel-eslint": "^6.1.0",
    "chai": "^3.0.0",
    "chai-as-promised": "^5.1.0",
    "eslint": "^2.13.1",
    "eslint-config-appium": "^0.1.0",
    "eslint-plugin-babel": "^3.3.0",
    "eslint-plugin-import": "^1.9.2",
    "eslint-plugin-mocha": "^3.0.0",
    "eslint-plugin-promise": "^3.3.1",
    "glob": "^7.1.0",
    "gulp": "^3.8.11",
    "ios-uicatalog": "^1.0.4",
    "ios-webview-app": "^1.0.4",
    "pem": "^1.8.3",
    "pre-commit": "^1.1.3",
    "request-promise": "^2.0.0",
    "sinon": "^1.17.4",
    "through2": "^2.0.0",
    "wd": "^1.0.0"
  },
  "readme": "=# appium-xcuitest-driver\n\n[![NPM version](http://img.shields.io/npm/v/appium-xcuitest-driver.svg)](https://npmjs.org/package/appium-xcuitest-driver)\n[![Downloads](http://img.shields.io/npm/dm/appium-xcuitest-driver.svg)](https://npmjs.org/package/appium-xcuitest-driver)\n[![Dependency Status](https://david-dm.org/appium/appium-xcuitest-driver.svg)](https://david-dm.org/appium/appium-xcuitest-driver)\n[![devDependency Status](https://david-dm.org/appium/appium-xcuitest-driver/dev-status.svg)](https://david-dm.org/appium/appium-xcuitest-driver#info=devDependencies)\n\n[![Build Status](https://api.travis-ci.org/appium/appium-xcuitest-driver.png?branch=master)](https://travis-ci.org/appium/appium-xcuitest-driver)\n[![Coverage Status](https://coveralls.io/repos/appium/appium-xcuitest-driver/badge.svg?branch=master)](https://coveralls.io/r/appium/appium-xcuitest-driver?branch=master)\n\n\n## Missing functionality\n\n* Setting geo location (https://github.com/appium/appium/issues/6856)\n* Auto accepting alerts (https://github.com/appium/appium/issues/6863)\n* Touch Actions\n\n## Known issues\n\n* Unable to interact with elements on devices in Landscape mode (https://github.com/appium/appium/issues/6994)\n* `shake` is not implemented due to lack of support from Apple\n* `lock` is not implemented due to lack of support from Apple\n* Setting geo-location not supported due to lack of support from Apple\n* Through multi action API, `zoom` works but `pinch` does not, due to Apple issue.\n\n\n## External dependencies\n\nIn addition to the git submodules mentioned below (see [Development](#development)), this package currently depends\non `libimobiledevice` to do certain things. Install it with [Homebrew](http://brew.sh/),\n\n```\nbrew install ideviceinstaller\n```\n\nThere is also a dependency, made necessary by Facebook's [WebDriverAgent](https://github.com/facebook/WebDriverAgent),\nfor the [Carthage](https://github.com/Carthage/Carthage) dependency manager. If you\ndo not have Carthage on your system, it can also be installed with\n[Homebrew](http://brew.sh/)\n\n```\nbrew install carthage\n```\n\n`ideviceinstaller` doesn't work with iOS 10 yet. So we need to install [ios-deploy](https://github.com/phonegap/ios-deploy)\n\n```\nnpm install -g ios-deploy\n```\n\nOn some systems the default logger, `idevicesyslog`, does not work. You can install `deviceconsole` and specify its path with the `realDeviceLogger` capability\n(**note:** This path should be the path to the _executable_ installed by the below command. It will be the directory created by the below command, followed by\n`/deviceconsole`).\n\n```\nnpm install -g deviceconsole\n```\n\nFor real devices we can use [xcpretty](https://github.com/supermarin/xcpretty) to make Xcode output more reasonable. This can be installed by\n\n```\ngem install xcpretty\n```\n\n\n## Sim Resetting\n\nBy default, this driver will create a new iOS simulator and run tests on it, deleting the simulator afterward.\n\nIf you specify a specific simulator using the `udid` capability, this driver will boot the specified simulator and shut it down afterwards.\n\nIf a udid is provided and the simulator is already running, this driver will leave it running after the test run.\n\nIn short, this driver tries to leave things as it found them.\n\nYou can use the `noReset` capability to adjust this behavior.\nSetting `noReset` to `true` will leave the simulator running at the end of a test session.\n\n\n## Real devices\n\n### Configuration\n\nThe `appium-xcuitest-driver` has provisional support for iOS real devices. Not all functionality is currently supported.\n\nWebDriverAgent needs to be built with `development team` and `provisioning profile` installed on device. The easiest way\nto do this is to specify them in an xcconfig file, the path to which is passed in to the system using the\n`xcodeConfigFile` desired capability\n```\nDEVELOPMENT_TEAM = <Team ID>\nCODE_SIGN_IDENTITY = iPhone Developer\n\n```\nThe Team ID is a unique 10-character string generated by Apple that is assigned to your team. You can find your Team ID using your developer account (Sign in to [developer.apple.com/account](developer.apple.com/account), and click Membership in the sidebar. Your Team ID appears in the Membership Information section under the team name.).\n\n### Manual configuration alternative\n\nAlternatively, the profile can be manually associated with the project (keep in mind that this will have to be done each\ntime the WebDriverAgent is updated):\n\n* Open terminal go to `node_modules/appium-xcuitest-driver/WebDriverAgent` (this path is relative to your appium installation).\n    ```\n    mkdir -p Resources/WebDriverAgent.bundle\n    sh ./Scripts/bootstrap.sh -d\n  ```\n\n* Open `WebDriverAgent.xcodeproj` in Xcode. Select your `development team` for **both** the `WebDriverAgentLib` and `WebDriverAgentRunner`\ntargets. This should also auto select `Signing Ceritificate`. The outcome should look as shown below.\n\n  ![alt WebDriverAgent in Xcode project](https://cloud.githubusercontent.com/assets/12143988/18771980/2dc4f412-80f8-11e6-9ad6-c6883dbf6a03.png)\n\n* Build `WebDriverAgent` once to verify all above steps worked.\n  ```\n    xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=<udid>' test\n\n  ```\n  Last line on build output above command should be `Listening on USB`. Then you are all set!\n\n  Internally it also expects `idevicesyslog` to be installed. For iOS 10 you need to install it like this `brew install libimobiledevice --HEAD` and for iOS 9 `brew install libimobiledevice`\n\n### Known problems\n\n#### Logger not working\n\nIf the system stops with log output like\n\n```\n[XCUITest] Waiting for WebDriverAgent to start on device\n[debug] [XCUITest] Log file for xcodebuild test: /Users/user/Library/Developer/Xcode/DerivedData/WebDriverAgent-dmeyhiwwsjtvnpfsgvqwxasavdxs/Logs/Test/23E16C13-3EFF-4980-95BD-8F69A04D91E3/Session-WebDriverAgentRunner-2016-10-07_095258-KgtUwt.log\n```\n\nThe culprit is usually the real device logger. By default the system uses `idevicesyslog`, which is installed with `libimobiledevice`, but on some machines this does not work. You can test by running `idevicesyslog` in a terminal window. If it fails, you can use `deviceconsole`, specifying the full path to the program with the `realDeviceLogger` capability.\n\n#### Weird state\n\n**Note:** Running WebDriverAgent tests on a real device is particularly flakey. If things stop responding, the only recourse is, most often, to restart the device. Logs in the form of the following _may_ start to occur:\n\n```shell\ninfo JSONWP Proxy Proxying [POST /session] to [POST http://10.35.4.122:8100/session] with body: {\"desiredCapabilities\":{\"ap...\"\ndbug WebDriverAgent Device: Jul 26 13:20:42 iamPhone XCTRunner[240] <Warning>: Listening on USB\ndbug WebDriverAgent Device: Jul 26 13:21:42 iamPhone XCTRunner[240] <Warning>: Enqueue Failure: UI Testing Failure - Unable to update application state promptly. <unknown> 0 1\ndbug WebDriverAgent Device: Jul 26 13:21:57 iamPhone XCTRunner[240] <Warning>: Enqueue Failure: UI Testing Failure - Failed to get screenshot within 15s <unknown> 0 1\ndbug WebDriverAgent Device: Jul 26 13:22:57 iamPhone XCTRunner[240] <Warning>: Enqueue Failure: UI Testing Failure - App state of (null) is still unknown <unknown> 0 1\n```\n\n### Real device security settings\n\nOn some systems there are Accessibility restrictions that make the `WebDriverAgent` system unable to run. This is usually manifest\nby `xcodebuild` returning an error code `65`. A workaround for this is to use a private key that is not stored on the system\nkeychain. See [this issue](https://github.com/appium/appium/issues/6955) and [this Stack Exchange post](http://stackoverflow.com/questions/16550594/jenkins-xcode-build-works-codesign-fails).\n\nTo export the key, use\n\n```\nsecurity create-keychain -p [keychain_password] MyKeychain.keychain\nsecurity import MyPrivateKey.p12 -t agg -k MyKeychain.keychain -P [p12_Password] -A\n```\n\nwhere `MyPrivateKey.p12` is the private development key exported from the system keychain.\n\nThe full path to the keychain can then be sent to the Appium system using the `keychainPath` desired capability,\nand the password sent through the `keychainPassword` capability.\n\n## Desired Capabilities\n\nShould be the same for [Appium](https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md)\n\nDifferences noted here\n\n|Capability|Description|Values|\n|----------|-----------|------|\n|`noReset`|Do not destroy or shut down sim after test. Start tests running on whichever sim is running, or device is plugged in. Default `false`|`true`, `false`|\n|`processArguments`|Process arguments and environment which will be sent to the WebDriverAgent server.|`{ args: [\"a\", \"b\", \"c\"] , env: { \"a\": \"b\", \"c\": \"d\" } }` or `'{\"args\": [\"a\", \"b\", \"c\"], \"env\": { \"a\": \"b\", \"c\": \"d\" }}'`|\n|`wdaLocalPort`|This value if specified, will be used to forward traffic from Mac host to real ios devices over USB. Default value is same as port number used by WDA on device.|e.g., `8100`|\n|`showXcodeLog`|Whether to display the output of the Xcode command used to run the tests. If this is `true`, there will be **lots** of extra logging at startup. Defaults to `false`|e.g., `true`|\n|`realDeviceLogger`|Device logger for real devices. It could be path to `deviceconsole` (installed with `npm install deviceconsole`, a compiled binary named `deviceconsole` will be added to `./node_modules/deviceconsole/`) or `idevicesyslog` (comes with libimobiledevice). Defaults to `idevicesyslog`|`idevicesyslog`, `/abs/path/to/deviceconsole`|\n|`iosInstallPause`|Time in milliseconds to pause between installing the application and starting WebDriverAgent on the device. Used particularly for larger applications. Defaults to `0`|e.g., `8000`|\n|`xcodeConfigFile`|Full path to an optional Xcode configuration file that specifies the code signing identity and team for running the WebDriverAgent on the real device.|e.g., `/path/to/myconfig.xcconfig`|\n|`keychainPath`|Full path to the private development key exported from the system keychain. Used in conjunction with `keychainPassword` when testing on real devices.|e.g., `/path/to/MyPrivateKey.p12`|\n|`keychainPassword`|Password for unlocking keychain specified in `keychainPath`.|e.g., `super awesome password`|\n|`scaleFactor`|Simulator scale factor. This is useful to have if the default resolution of simulated device is greater than the actual display resolution. So you can scale the simulator to see the whole device screen without scrolling. |Acceptable values are: `'1.0', '0.75', '0.5', '0.33' and '0.25'`. The value should be a string.|\n|`usePrebuiltWDA`|Skips the build phase of running the WDA app. Building is then the responsibility of the user. Only works for Xcode 8+. Defaults to `false`.|e.g., `true`|\n|'preventWDAAttachments`|Sets read only permissons to Attachments subfolder of WebDriverAgent root inside Xcode's DerivedData. This is necessary to prevent XCTest framework from creating tons of unnecessary screenshots and logs, which are impossible to shutdown using programming interfaces provided by Apple.|Setting the capability to `true` will set Posix permissions of the folder to `555` and `false` will reset them back to `755`|\n\n\n\n## Development<a id=\"development\"></a>\n\nThis project has git submodules!\n\nClone with the `git clone --recursive` flag. Or, after cloning normally run `git submodule init` and then `git submodule update`\n\nThe `git diff --submodule` flag is useful here. It can also be set as the default `diff` format: `git config --global diff.submodule log`\n\n`git config status.submodulesummary 1` is also useful.\n\n\n### Watch\n\n```\nnpm run watch\n```\n\n\n### Test\n\n```\nnpm test\n```\n\n\n### WebDriverAgent Updating\n\nUpdating FaceBook's [WebDriverAgent](https://github.com/facebook/WebDriverAgent)\nis as simple as running updating the submodule and then committing the change:\n\n```\ngit checkout -b <update-branch-name>\ngit submodule update --remote\ngit add WebDriverAgent\ngit commit -m \"Updating upstream WebDriverAgent changes\"\n```\n\nThere is a chance that the update changed something critical, which will manifest\nitself as `xcodebuild` throwing errors. The easiest remedy is to delete the\nfiles, which are somewhere like `/Users/isaac/Library/Developer/Xcode/DerivedData/WebDriverAgent-eoyoecqmiqfeodgstkwbxkfyagll`.\nThis is also necessary when switching SDKs (e.g., moving from Xcode 7.3 to 8).\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/appium/appium-xcuitest-driver#readme",
  "_id": "appium-xcuitest-driver@2.3.0",
  "_shasum": "fc34af3e595b8601f2a282597716ad204904383b",
  "_resolved": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.3.0.tgz",
  "_from": "https://registry.npmjs.org/appium-xcuitest-driver/-/appium-xcuitest-driver-2.3.0.tgz"
}
