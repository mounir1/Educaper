'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var WDA_DERIVED_DATA_SEARCH_SUFFIX = 'Library/Developer/Xcode/DerivedData/WebDriverAgent-*';
var WDA_ATTACHMENTS_FOLDER_RELATIVE_PATH = 'Logs/Test/Attachments';

function detectUdid() {
  var cmd, args, udid, _ref, stdout;

  return _regeneratorRuntime.async(function detectUdid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Auto-detecting real device udid...');
        cmd = undefined, args = [];
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('idevice_id'));

      case 5:
        cmd = context$1$0.sent;

        args.push('-l');
        _logger2['default'].debug('Using idevice_id');
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](2);

        _logger2['default'].debug('Using udidetect');
        cmd = require.resolve('udidetect');

      case 14:
        udid = undefined;
        context$1$0.prev = 15;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(cmd, args, { timeout: 3000 }));

      case 18:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        udid = stdout.split('\n')[0];
        context$1$0.next = 26;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t1 = context$1$0['catch'](15);

        _logger2['default'].errorAndThrow('Error detecting udid: ' + context$1$0.t1.message);

      case 26:
        if (!(!udid || udid.length <= 2)) {
          context$1$0.next = 28;
          break;
        }

        throw new Error('Could not detect udid.');

      case 28:
        _logger2['default'].debug('Detected real device udid: \'' + udid + '\'');
        return context$1$0.abrupt('return', udid);

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 10], [15, 23]]);
}

function getAndCheckXcodeVersion() {
  var version;
  return _regeneratorRuntime.async(function getAndCheckXcodeVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        version = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 4:
        version = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug(context$1$0.t0);
        _logger2['default'].errorAndThrow('Could not determine Xcode version: ' + context$1$0.t0.message);

      case 11:

        // we do not support Xcodes < 7.3,
        if (version.versionFloat < 7.3) {
          _logger2['default'].warn('Xcode version \'' + version.versionString + '\'. Support for Xcode ' + (version.versionString + ' has been deprecated and will be removed ') + 'in a future version. Please upgrade to version 7 or higher');
        }
        return context$1$0.abrupt('return', version);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function getAndCheckIosSdkVersion() {
  var versionNumber;
  return _regeneratorRuntime.async(function getAndCheckIosSdkVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        versionNumber = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getMaxIOSSDK());

      case 4:
        versionNumber = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].errorAndThrow('Could not determine iOS SDK version: ' + context$1$0.t0.message);

      case 10:
        return context$1$0.abrupt('return', versionNumber);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
}

function killAppUsingAppName(udid, appName) {
  var psArgs;
  return _regeneratorRuntime.async(function killAppUsingAppName$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        psArgs = ['-c', 'ps -ax|grep -i "' + appName + '"|grep -i "' + udid + '"|grep -v grep|awk \'{print "kill -9 " $1}\'|sh'];
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', psArgs));

      case 4:
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].debug('Error : ' + context$1$0.t0.message);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6]]);
}

function adjustWDAAttachmentsPermissions(perms) {
  var derivedDataSearchMask, folders, processedFolders, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, folder, attachmentsFolder;

  return _regeneratorRuntime.async(function adjustWDAAttachmentsPermissions$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (process.env.HOME) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Need HOME env var to be set in order to adjust WDA attachments permission');

      case 2:
        derivedDataSearchMask = _path2['default'].join(process.env.HOME, WDA_DERIVED_DATA_SEARCH_SUFFIX);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.glob(derivedDataSearchMask));

      case 5:
        folders = context$1$0.sent;
        processedFolders = [];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 10;
        _iterator = _getIterator(folders);

      case 12:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 26;
          break;
        }

        folder = _step.value;

        _logger2['default'].debug('Found WDA derived data folder: ' + folder);
        attachmentsFolder = _path2['default'].join(folder, WDA_ATTACHMENTS_FOLDER_RELATIVE_PATH);
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(attachmentsFolder));

      case 18:
        if (!context$1$0.sent) {
          context$1$0.next = 23;
          break;
        }

        _logger2['default'].info('Setting \'' + perms + '\' permissions to ' + attachmentsFolder + ' folder');
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.chmod(attachmentsFolder, perms));

      case 22:
        processedFolders.push(attachmentsFolder);

      case 23:
        _iteratorNormalCompletion = true;
        context$1$0.next = 12;
        break;

      case 26:
        context$1$0.next = 32;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t0 = context$1$0['catch'](10);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 32:
        context$1$0.prev = 32;
        context$1$0.prev = 33;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 35:
        context$1$0.prev = 35;

        if (!_didIteratorError) {
          context$1$0.next = 38;
          break;
        }

        throw _iteratorError;

      case 38:
        return context$1$0.finish(35);

      case 39:
        return context$1$0.finish(32);

      case 40:
        if (!processedFolders.length) {
          _logger2['default'].info('No WDA derived data folders have been found.');
        }

      case 41:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 28, 32, 40], [33,, 35, 39]]);
}

exports.detectUdid = detectUdid;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.killAppUsingAppName = killAppUsingAppName;
exports.adjustWDAAttachmentsPermissions = adjustWDAAttachmentsPermissions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSw4QkFBOEIsQ0FBQzs7eUNBQ25FLGtCQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQzs7O0FBQTlDLGVBQU87QUFDUCx3QkFBZ0IsR0FBRyxFQUFFOzs7OztpQ0FDTixPQUFPOzs7Ozs7OztBQUFqQixjQUFNOztBQUNiLDRCQUFJLEtBQUsscUNBQW1DLE1BQU0sQ0FBRyxDQUFDO0FBQ2xELHlCQUFpQixHQUFHLGtCQUFLLElBQUksQ0FBQyxNQUFNLEVBQUUsb0NBQW9DLENBQUM7O3lDQUNyRSxrQkFBRyxNQUFNLENBQUMsaUJBQWlCLENBQUM7Ozs7Ozs7O0FBQ3BDLDRCQUFJLElBQUksZ0JBQWEsS0FBSywwQkFBb0IsaUJBQWlCLGFBQVUsQ0FBQzs7eUNBQ3BFLGtCQUFHLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUM7OztBQUN4Qyx3QkFBZ0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRzdDLFlBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7QUFDNUIsOEJBQUksSUFBSSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7U0FDMUQ7Ozs7Ozs7Q0FDRjs7UUFFUSxVQUFVLEdBQVYsVUFBVTtRQUFFLHVCQUF1QixHQUF2Qix1QkFBdUI7UUFBRSx3QkFBd0IsR0FBeEIsd0JBQXdCO1FBQUUsbUJBQW1CLEdBQW5CLG1CQUFtQjtRQUFFLCtCQUErQixHQUEvQiwrQkFBK0IiLCJmaWxlIjoibGliL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHhjb2RlIGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgV0RBX0RFUklWRURfREFUQV9TRUFSQ0hfU1VGRklYID0gJ0xpYnJhcnkvRGV2ZWxvcGVyL1hjb2RlL0Rlcml2ZWREYXRhL1dlYkRyaXZlckFnZW50LSonO1xuY29uc3QgV0RBX0FUVEFDSE1FTlRTX0ZPTERFUl9SRUxBVElWRV9QQVRIID0gJ0xvZ3MvVGVzdC9BdHRhY2htZW50cyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGRldGVjdFVkaWQgKCkge1xuICBsb2cuZGVidWcoJ0F1dG8tZGV0ZWN0aW5nIHJlYWwgZGV2aWNlIHVkaWQuLi4nKTtcbiAgbGV0ICBjbWQsIGFyZ3MgPSBbXTtcbiAgdHJ5IHtcbiAgICBjbWQgPSBhd2FpdCBmcy53aGljaCgnaWRldmljZV9pZCcpO1xuICAgIGFyZ3MucHVzaCgnLWwnKTtcbiAgICBsb2cuZGVidWcoJ1VzaW5nIGlkZXZpY2VfaWQnKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKCdVc2luZyB1ZGlkZXRlY3QnKTtcbiAgICBjbWQgPSByZXF1aXJlLnJlc29sdmUoJ3VkaWRldGVjdCcpO1xuICB9XG4gIGxldCB1ZGlkO1xuICB0cnkge1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoY21kLCBhcmdzLCB7dGltZW91dDogMzAwMH0pO1xuICAgIHVkaWQgPSBzdGRvdXQuc3BsaXQoJ1xcbicpWzBdO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgRXJyb3IgZGV0ZWN0aW5nIHVkaWQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbiAgaWYgKCF1ZGlkIHx8IHVkaWQubGVuZ3RoIDw9IDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkZXRlY3QgdWRpZC4nKTtcbiAgfVxuICBsb2cuZGVidWcoYERldGVjdGVkIHJlYWwgZGV2aWNlIHVkaWQ6ICcke3VkaWR9J2ApO1xuICByZXR1cm4gdWRpZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24gKCkge1xuICBsZXQgdmVyc2lvbjtcbiAgdHJ5IHtcbiAgICB2ZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKGVycik7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBkZXRlcm1pbmUgWGNvZGUgdmVyc2lvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuXG4gIC8vIHdlIGRvIG5vdCBzdXBwb3J0IFhjb2RlcyA8IDcuMyxcbiAgaWYgKHZlcnNpb24udmVyc2lvbkZsb2F0IDwgNy4zKSB7XG4gICAgbG9nLndhcm4oYFhjb2RlIHZlcnNpb24gJyR7dmVyc2lvbi52ZXJzaW9uU3RyaW5nfScuIFN1cHBvcnQgZm9yIFhjb2RlIGAgK1xuICAgICAgICAgICAgIGAke3ZlcnNpb24udmVyc2lvblN0cmluZ30gaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGAgK1xuICAgICAgICAgICAgIGBpbiBhIGZ1dHVyZSB2ZXJzaW9uLiBQbGVhc2UgdXBncmFkZSB0byB2ZXJzaW9uIDcgb3IgaGlnaGVyYCk7XG4gIH1cbiAgcmV0dXJuIHZlcnNpb247XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFuZENoZWNrSW9zU2RrVmVyc2lvbiAoKSB7XG4gIGxldCB2ZXJzaW9uTnVtYmVyO1xuICB0cnkge1xuICAgIHZlcnNpb25OdW1iZXIgPSBhd2FpdCB4Y29kZS5nZXRNYXhJT1NTREsoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBkZXRlcm1pbmUgaU9TIFNESyB2ZXJzaW9uOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIHJldHVybiB2ZXJzaW9uTnVtYmVyO1xufVxuXG5hc3luYyBmdW5jdGlvbiBraWxsQXBwVXNpbmdBcHBOYW1lICh1ZGlkLCBhcHBOYW1lKSB7XG4gIGxldCBwc0FyZ3MgPSBbYC1jYCwgYHBzIC1heHxncmVwIC1pIFwiJHthcHBOYW1lfVwifGdyZXAgLWkgXCIke3VkaWR9XCJ8Z3JlcCAtdiBncmVwfGF3ayAne3ByaW50IFwia2lsbCAtOSBcIiAkMX0nfHNoYF07XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYyhgYmFzaGAsIHBzQXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5kZWJ1ZyhgRXJyb3IgOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFkanVzdFdEQUF0dGFjaG1lbnRzUGVybWlzc2lvbnMgKHBlcm1zKSB7XG4gIGlmICghcHJvY2Vzcy5lbnYuSE9NRSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVlZCBIT01FIGVudiB2YXIgdG8gYmUgc2V0IGluIG9yZGVyIHRvIGFkanVzdCBXREEgYXR0YWNobWVudHMgcGVybWlzc2lvbicpO1xuICB9XG4gIGxldCBkZXJpdmVkRGF0YVNlYXJjaE1hc2sgPSBwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuSE9NRSwgV0RBX0RFUklWRURfREFUQV9TRUFSQ0hfU1VGRklYKTtcbiAgbGV0IGZvbGRlcnMgPSBhd2FpdCBmcy5nbG9iKGRlcml2ZWREYXRhU2VhcmNoTWFzayk7XG4gIGxldCBwcm9jZXNzZWRGb2xkZXJzID0gW107XG4gIGZvciAobGV0IGZvbGRlciBvZiBmb2xkZXJzKSB7XG4gICAgbG9nLmRlYnVnKGBGb3VuZCBXREEgZGVyaXZlZCBkYXRhIGZvbGRlcjogJHtmb2xkZXJ9YCk7XG4gICAgbGV0IGF0dGFjaG1lbnRzRm9sZGVyID0gcGF0aC5qb2luKGZvbGRlciwgV0RBX0FUVEFDSE1FTlRTX0ZPTERFUl9SRUxBVElWRV9QQVRIKTtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKGF0dGFjaG1lbnRzRm9sZGVyKSkge1xuICAgICAgbG9nLmluZm8oYFNldHRpbmcgJyR7cGVybXN9JyBwZXJtaXNzaW9ucyB0byAke2F0dGFjaG1lbnRzRm9sZGVyfSBmb2xkZXJgKTtcbiAgICAgIGF3YWl0IGZzLmNobW9kKGF0dGFjaG1lbnRzRm9sZGVyLCBwZXJtcyk7XG4gICAgICBwcm9jZXNzZWRGb2xkZXJzLnB1c2goYXR0YWNobWVudHNGb2xkZXIpO1xuICAgIH1cbiAgfVxuICBpZiAoIXByb2Nlc3NlZEZvbGRlcnMubGVuZ3RoKSB7XG4gICAgbG9nLmluZm8oJ05vIFdEQSBkZXJpdmVkIGRhdGEgZm9sZGVycyBoYXZlIGJlZW4gZm91bmQuJyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZGV0ZWN0VWRpZCwgZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24sIGdldEFuZENoZWNrSW9zU2RrVmVyc2lvbiwga2lsbEFwcFVzaW5nQXBwTmFtZSwgYWRqdXN0V0RBQXR0YWNobWVudHNQZXJtaXNzaW9ucyB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
