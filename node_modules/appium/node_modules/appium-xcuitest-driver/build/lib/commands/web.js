'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.web);

extensions.clickCoords = function callee$0$0(coords) {
  var x, y;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        x = coords.x;
        y = coords.y;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/tap/nil', 'POST', { x: x, y: y }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.translateWebCoords = function callee$0$0(coords) {
  var webviewIndex, yOffset, webviews, wvId, rect, wvPos, realDims, cmd, _ref, w, h, wvDims, urlBarHeight, realDimensionHeight, xRatio, yRatio, newCoords;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Translating coordinates (' + JSON.stringify(coords) + ') to web coordinates');
        webviewIndex = this.webContextIndex();
        yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/elements', 'POST', { using: 'class name', value: 'XCUIElementTypeWebView' }));

      case 5:
        webviews = context$1$0.sent;

        if (!(webviews.length < 1)) {
          context$1$0.next = 8;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError.code('Could not find any webviews to click inside!');

      case 8:
        if (_lodash2['default'].isUndefined(webviews[webviewIndex])) {
          _logger2['default'].warn('Could not find webview at index ' + webviewIndex + ', taking ' + 'last available one for clicking purposes');
          webviewIndex = webviews.length - 1;
        }

        wvId = webviews[webviewIndex].ELEMENT;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + wvId + '/rect', 'GET'));

      case 12:
        rect = context$1$0.sent;
        wvPos = { x: rect.x, y: rect.y };
        realDims = { w: rect.width, h: rect.height };
        cmd = '(function () { return {w: document.documentElement.clientWidth, h: document.documentElement.clientHeight}; })()';
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.remote.execute(cmd));

      case 18:
        _ref = context$1$0.sent;
        w = _ref.w;
        h = _ref.h;
        wvDims = { w: w, h: h };
        urlBarHeight = 64;

        wvPos.y += urlBarHeight;

        realDimensionHeight = 108;

        realDims.h -= realDimensionHeight;

        if (!(wvDims && realDims && wvPos)) {
          context$1$0.next = 32;
          break;
        }

        xRatio = realDims.w / wvDims.w;
        yRatio = realDims.h / wvDims.h;
        newCoords = {
          x: wvPos.x + Math.round(xRatio * coords.x),
          y: wvPos.y + yOffset + Math.round(yRatio * coords.y)
        };

        _logger2['default'].debug('Converted web coords ' + JSON.stringify(coords) + ' ' + ('into real coords ' + JSON.stringify(newCoords)));
        return context$1$0.abrupt('return', newCoords);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.checkForAlert = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', false);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = extensions;
module.exports = exports['default'];

// tap on absolute coordinates

// add static offset for safari in landscape mode

// absolutize web coords

// TODO: investigate where these come from. They appear to be constants in my tests
//# sourceMappingURL=data:application/json;charset=utf8;base64,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SSxLQUFLLENBQUE7Ozs7O0FBQ3pCLGNBQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLGNBQU0sR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLGlCQUFTLEdBQUc7QUFDZCxXQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzFDLFdBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3JEOztBQUNELDRCQUFJLEtBQUssQ0FBQywwQkFBd0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0NBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUUsQ0FBQyxDQUFDOzRDQUN0RCxTQUFTOzs7Ozs7O0NBRW5CLENBQUM7O0FBRUYsVUFBVSxDQUFDLGFBQWEsR0FBRzs7Ozs0Q0FDbEIsS0FBSzs7Ozs7OztDQUNiLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL3dlYi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cblxubGV0IGV4dGVuc2lvbnMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBpb3NDb21tYW5kcy53ZWIpO1xuXG5leHRlbnNpb25zLmNsaWNrQ29vcmRzID0gYXN5bmMgZnVuY3Rpb24gKGNvb3Jkcykge1xuICBsZXQge3gsIHl9ID0gY29vcmRzO1xuXG4gIC8vIHRhcCBvbiBhYnNvbHV0ZSBjb29yZGluYXRlc1xuICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3RhcC9uaWwnLCAnUE9TVCcsIHt4LCB5fSk7XG59O1xuXG5leHRlbnNpb25zLnRyYW5zbGF0ZVdlYkNvb3JkcyA9IGFzeW5jIGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgbG9nLmRlYnVnKGBUcmFuc2xhdGluZyBjb29yZGluYXRlcyAoJHtKU09OLnN0cmluZ2lmeShjb29yZHMpfSkgdG8gd2ViIGNvb3JkaW5hdGVzYCk7XG4gIGxldCB3ZWJ2aWV3SW5kZXggPSB0aGlzLndlYkNvbnRleHRJbmRleCgpO1xuXG4gIC8vIGFkZCBzdGF0aWMgb2Zmc2V0IGZvciBzYWZhcmkgaW4gbGFuZHNjYXBlIG1vZGVcbiAgbGV0IHlPZmZzZXQgPSB0aGlzLm9wdHMuY3VyT3JpZW50YXRpb24gPT09ICdMQU5EU0NBUEUnID8gdGhpcy5sYW5kc2NhcGVXZWJDb29yZHNPZmZzZXQgOiAwO1xuXG4gIC8vIGFic29sdXRpemUgd2ViIGNvb3Jkc1xuICBsZXQgd2Vidmlld3MgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2VsZW1lbnRzJywgJ1BPU1QnLCB7dXNpbmc6ICdjbGFzcyBuYW1lJywgdmFsdWU6ICdYQ1VJRWxlbWVudFR5cGVXZWJWaWV3J30pO1xuICBpZiAod2Vidmlld3MubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yLmNvZGUoJ0NvdWxkIG5vdCBmaW5kIGFueSB3ZWJ2aWV3cyB0byBjbGljayBpbnNpZGUhJyk7XG4gIH1cbiAgaWYgKF8uaXNVbmRlZmluZWQod2Vidmlld3Nbd2Vidmlld0luZGV4XSkpIHtcbiAgICBsb2cud2FybihgQ291bGQgbm90IGZpbmQgd2VidmlldyBhdCBpbmRleCAke3dlYnZpZXdJbmRleH0sIHRha2luZyBgICtcbiAgICAgICAgICAgICAgICBgbGFzdCBhdmFpbGFibGUgb25lIGZvciBjbGlja2luZyBwdXJwb3Nlc2ApO1xuICAgIHdlYnZpZXdJbmRleCA9IHdlYnZpZXdzLmxlbmd0aCAtIDE7XG4gIH1cblxuICBsZXQgd3ZJZCA9IHdlYnZpZXdzW3dlYnZpZXdJbmRleF0uRUxFTUVOVDtcbiAgbGV0IHJlY3QgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHt3dklkfS9yZWN0YCwgJ0dFVCcpO1xuICBsZXQgd3ZQb3MgPSB7eDogcmVjdC54LCB5OiByZWN0Lnl9O1xuICBsZXQgcmVhbERpbXMgPSB7dzogcmVjdC53aWR0aCwgaDogcmVjdC5oZWlnaHR9O1xuXG4gIGxldCBjbWQgPSAnKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHt3OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHR9OyB9KSgpJztcbiAgbGV0IHt3LCBofSA9IGF3YWl0IHRoaXMucmVtb3RlLmV4ZWN1dGUoY21kKTtcbiAgbGV0IHd2RGltcyA9IHt3LCBofTtcblxuICAvLyBUT0RPOiBpbnZlc3RpZ2F0ZSB3aGVyZSB0aGVzZSBjb21lIGZyb20uIFRoZXkgYXBwZWFyIHRvIGJlIGNvbnN0YW50cyBpbiBteSB0ZXN0c1xuICBsZXQgdXJsQmFySGVpZ2h0ID0gNjQ7XG4gIHd2UG9zLnkgKz0gdXJsQmFySGVpZ2h0O1xuXG4gIGxldCByZWFsRGltZW5zaW9uSGVpZ2h0ID0gMTA4O1xuICByZWFsRGltcy5oIC09IHJlYWxEaW1lbnNpb25IZWlnaHQ7XG5cbiAgaWYgKHd2RGltcyAmJiByZWFsRGltcyAmJiB3dlBvcykge1xuICAgIGxldCB4UmF0aW8gPSByZWFsRGltcy53IC8gd3ZEaW1zLnc7XG4gICAgbGV0IHlSYXRpbyA9IHJlYWxEaW1zLmggLyB3dkRpbXMuaDtcbiAgICBsZXQgbmV3Q29vcmRzID0ge1xuICAgICAgeDogd3ZQb3MueCArIE1hdGgucm91bmQoeFJhdGlvICogY29vcmRzLngpLFxuICAgICAgeTogd3ZQb3MueSArIHlPZmZzZXQgKyBNYXRoLnJvdW5kKHlSYXRpbyAqIGNvb3Jkcy55KSxcbiAgICB9O1xuICAgIGxvZy5kZWJ1ZyhgQ29udmVydGVkIHdlYiBjb29yZHMgJHtKU09OLnN0cmluZ2lmeShjb29yZHMpfSBgICtcbiAgICAgICAgICAgICAgICBgaW50byByZWFsIGNvb3JkcyAke0pTT04uc3RyaW5naWZ5KG5ld0Nvb3Jkcyl9YCk7XG4gICAgcmV0dXJuIG5ld0Nvb3JkcztcbiAgfVxufTtcblxuZXh0ZW5zaW9ucy5jaGVja0ZvckFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
