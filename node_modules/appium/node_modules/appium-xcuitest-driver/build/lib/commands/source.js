'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _js2xmlparser2 = require("js2xmlparser2");

var _js2xmlparser22 = _interopRequireDefault(_js2xmlparser2);

var commands = {},
    helpers = {},
    extensions = {};

// WDA uses a POST request to get the source. Until that
// is fixed, we need to translate the request
commands.getPageSource = function callee$0$0() {
  var cmd;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 5;
          break;
        }

        cmd = 'document.getElementsByTagName("html")[0].outerHTML';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.remote.execute(cmd));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getNativePageSource());

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getNativePageSource = function callee$0$0() {
  var method, endpoint, srcTree, src;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        method = 'POST';
        endpoint = '/source';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, method));

      case 4:
        srcTree = context$1$0.sent;
        src = getSourceXml(getTreeForXML(srcTree));
        return context$1$0.abrupt('return', src);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// { isEnabled: '1',
//   isVisible: '1',
//   frame: '{{0, 0}, {375, 667}}',
//   children:
//    [ { isEnabled: '1',
//        isVisible: '1',
//        frame: '{{0, 0}, {375, 667}}',
//        children: [],
//        rect: { x: 0, y: 0, width: 375, height: 667 },
//        value: null,
//        label: null,
//        type: 'Other',
//        name: null,
//        rawIdentifier: null },
//   rect: { origin: { x: 0, y: 0 }, size: { width: 375, height: 667 } },
//   value: null,
//   label: 'UICatalog',
//   type: 'Application',
//   name: 'UICatalog',
//   rawIdentifier: null }
function getTreeForXML(srcTree) {
  function getTree(element, elementIndex, parentPath) {
    var curPath = parentPath + '/' + elementIndex;
    var rect = element.rect || {};
    var subtree = {
      '@': {
        name: element.name || '',
        label: element.label || '',
        value: element.value,
        dom: null,
        enabled: parseInt(element.isEnabled, 10) === 1,
        valid: true,
        visible: parseInt(element.isVisible, 10) === 1,
        hint: element.hint || '',
        path: curPath,
        x: rect.x,
        y: rect.y,
        width: rect.width,
        height: rect.height
      },
      '>': []
    };
    for (var i = 0; i < (element.children || []).length; i++) {
      subtree['>'].push(getTree(element.children[i], i, curPath));
    }
    return _defineProperty({}, 'XCUIElementType' + element.type, subtree);
  }
  var tree = getTree(srcTree.tree, 0, '');
  return tree;
}

function getSourceXml(jsonSource) {
  return (0, _js2xmlparser22['default'])("AppiumAUT", jsonSource, {
    wrapArray: { enabled: false, elementName: 'element' },
    declaration: { include: true },
    prettyPrinting: { indentString: '    ' }
  });
}

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// translate the returned value into what Appium expects
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zb3VyY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7NkJBQW1CLGVBQWU7Ozs7QUFHbEMsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7OztBQUlqRCxRQUFRLENBQUMsYUFBYSxHQUFHO01BRWpCLEdBQUc7Ozs7YUFETCxJQUFJLENBQUMsWUFBWSxFQUFFOzs7OztBQUNqQixXQUFHLEdBQUcsb0RBQW9EOzt5Q0FDakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDOzs7Ozs7O3lDQUcxQixJQUFJLENBQUMsbUJBQW1CLEVBQUU7Ozs7Ozs7Ozs7Q0FDeEMsQ0FBQzs7QUFFRixPQUFPLENBQUMsbUJBQW1CLEdBQUc7TUFDeEIsTUFBTSxFQUNOLFFBQVEsRUFDUixPQUFPLEVBR1AsR0FBRzs7OztBQUxILGNBQU0sR0FBRyxNQUFNO0FBQ2YsZ0JBQVE7O3lDQUNRLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQzs7O0FBQW5ELGVBQU87QUFHUCxXQUFHLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs0Q0FFdkMsR0FBRzs7Ozs7OztDQUNYLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkYsU0FBUyxhQUFhLENBQUUsT0FBTyxFQUFFO0FBQy9CLFdBQVMsT0FBTyxDQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFO0FBQ25ELFFBQUksT0FBTyxHQUFNLFVBQVUsU0FBSSxZQUFZLEFBQUUsQ0FBQztBQUM5QyxRQUFJLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUM5QixRQUFJLE9BQU8sR0FBRztBQUNaLFNBQUcsRUFBRTtBQUNILFlBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUU7QUFDeEIsYUFBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtBQUMxQixhQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7QUFDcEIsV0FBRyxFQUFFLElBQUk7QUFDVCxlQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQztBQUM5QyxhQUFLLEVBQUUsSUFBSTtBQUNYLGVBQU8sRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDO0FBQzlDLFlBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUU7QUFDeEIsWUFBSSxFQUFFLE9BQU87QUFDYixTQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDVCxTQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDVCxhQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7QUFDakIsY0FBTSxFQUFFLElBQUksQ0FBQyxNQUFNO09BQ3BCO0FBQ0QsU0FBRyxFQUFFLEVBQUU7S0FDUixDQUFDO0FBQ0YsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUEsQ0FBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDeEQsYUFBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUM3RDtBQUNELG1EQUNxQixPQUFPLENBQUMsSUFBSSxFQUFLLE9BQU8sRUFDM0M7R0FDSDtBQUNELE1BQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN4QyxTQUFPLElBQUksQ0FBQztDQUNiOztBQUVELFNBQVMsWUFBWSxDQUFFLFVBQVUsRUFBRTtBQUNqQyxTQUFPLGdDQUFPLFdBQVcsRUFBRSxVQUFVLEVBQUU7QUFDckMsYUFBUyxFQUFFLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDO0FBQ25ELGVBQVcsRUFBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUM7QUFDNUIsa0JBQWMsRUFBRSxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUM7R0FDdkMsQ0FBQyxDQUFDO0NBQ0o7O0FBR0QsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpzMnhtbCBmcm9tIFwianMyeG1scGFyc2VyMlwiO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuLy8gV0RBIHVzZXMgYSBQT1NUIHJlcXVlc3QgdG8gZ2V0IHRoZSBzb3VyY2UuIFVudGlsIHRoYXRcbi8vIGlzIGZpeGVkLCB3ZSBuZWVkIHRvIHRyYW5zbGF0ZSB0aGUgcmVxdWVzdFxuY29tbWFuZHMuZ2V0UGFnZVNvdXJjZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBsZXQgY21kID0gJ2RvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXS5vdXRlckhUTUwnO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlbW90ZS5leGVjdXRlKGNtZCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5nZXROYXRpdmVQYWdlU291cmNlKCk7XG59O1xuXG5oZWxwZXJzLmdldE5hdGl2ZVBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCBtZXRob2QgPSAnUE9TVCc7XG4gIGxldCBlbmRwb2ludCA9IGAvc291cmNlYDtcbiAgbGV0IHNyY1RyZWUgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChlbmRwb2ludCwgbWV0aG9kKTtcblxuICAvLyB0cmFuc2xhdGUgdGhlIHJldHVybmVkIHZhbHVlIGludG8gd2hhdCBBcHBpdW0gZXhwZWN0c1xuICBsZXQgc3JjID0gZ2V0U291cmNlWG1sKGdldFRyZWVGb3JYTUwoc3JjVHJlZSkpO1xuXG4gIHJldHVybiBzcmM7XG59O1xuXG4vLyB7IGlzRW5hYmxlZDogJzEnLFxuLy8gICBpc1Zpc2libGU6ICcxJyxcbi8vICAgZnJhbWU6ICd7ezAsIDB9LCB7Mzc1LCA2Njd9fScsXG4vLyAgIGNoaWxkcmVuOlxuLy8gICAgWyB7IGlzRW5hYmxlZDogJzEnLFxuLy8gICAgICAgIGlzVmlzaWJsZTogJzEnLFxuLy8gICAgICAgIGZyYW1lOiAne3swLCAwfSwgezM3NSwgNjY3fX0nLFxuLy8gICAgICAgIGNoaWxkcmVuOiBbXSxcbi8vICAgICAgICByZWN0OiB7IHg6IDAsIHk6IDAsIHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0sXG4vLyAgICAgICAgdmFsdWU6IG51bGwsXG4vLyAgICAgICAgbGFiZWw6IG51bGwsXG4vLyAgICAgICAgdHlwZTogJ090aGVyJyxcbi8vICAgICAgICBuYW1lOiBudWxsLFxuLy8gICAgICAgIHJhd0lkZW50aWZpZXI6IG51bGwgfSxcbi8vICAgcmVjdDogeyBvcmlnaW46IHsgeDogMCwgeTogMCB9LCBzaXplOiB7IHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0gfSxcbi8vICAgdmFsdWU6IG51bGwsXG4vLyAgIGxhYmVsOiAnVUlDYXRhbG9nJyxcbi8vICAgdHlwZTogJ0FwcGxpY2F0aW9uJyxcbi8vICAgbmFtZTogJ1VJQ2F0YWxvZycsXG4vLyAgIHJhd0lkZW50aWZpZXI6IG51bGwgfVxuZnVuY3Rpb24gZ2V0VHJlZUZvclhNTCAoc3JjVHJlZSkge1xuICBmdW5jdGlvbiBnZXRUcmVlIChlbGVtZW50LCBlbGVtZW50SW5kZXgsIHBhcmVudFBhdGgpIHtcbiAgICBsZXQgY3VyUGF0aCA9IGAke3BhcmVudFBhdGh9LyR7ZWxlbWVudEluZGV4fWA7XG4gICAgbGV0IHJlY3QgPSBlbGVtZW50LnJlY3QgfHwge307XG4gICAgbGV0IHN1YnRyZWUgPSB7XG4gICAgICAnQCc6IHtcbiAgICAgICAgbmFtZTogZWxlbWVudC5uYW1lIHx8ICcnLFxuICAgICAgICBsYWJlbDogZWxlbWVudC5sYWJlbCB8fCAnJyxcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWUsXG4gICAgICAgIGRvbTogbnVsbCxcbiAgICAgICAgZW5hYmxlZDogcGFyc2VJbnQoZWxlbWVudC5pc0VuYWJsZWQsIDEwKSA9PT0gMSxcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIHZpc2libGU6IHBhcnNlSW50KGVsZW1lbnQuaXNWaXNpYmxlLCAxMCkgPT09IDEsXG4gICAgICAgIGhpbnQ6IGVsZW1lbnQuaGludCB8fCAnJyxcbiAgICAgICAgcGF0aDogY3VyUGF0aCxcbiAgICAgICAgeDogcmVjdC54LFxuICAgICAgICB5OiByZWN0LnksXG4gICAgICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgfSxcbiAgICAgICc+JzogW11cbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKGVsZW1lbnQuY2hpbGRyZW4gfHwgW10pLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdWJ0cmVlWyc+J10ucHVzaChnZXRUcmVlKGVsZW1lbnQuY2hpbGRyZW5baV0sIGksIGN1clBhdGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIFtgWENVSUVsZW1lbnRUeXBlJHtlbGVtZW50LnR5cGV9YF06IHN1YnRyZWVcbiAgICB9O1xuICB9XG4gIGxldCB0cmVlID0gZ2V0VHJlZShzcmNUcmVlLnRyZWUsIDAsICcnKTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbmZ1bmN0aW9uIGdldFNvdXJjZVhtbCAoanNvblNvdXJjZSkge1xuICByZXR1cm4ganMyeG1sKFwiQXBwaXVtQVVUXCIsIGpzb25Tb3VyY2UsIHtcbiAgICB3cmFwQXJyYXk6IHtlbmFibGVkOiBmYWxzZSwgZWxlbWVudE5hbWU6ICdlbGVtZW50J30sXG4gICAgZGVjbGFyYXRpb246IHtpbmNsdWRlOiB0cnVlfSxcbiAgICBwcmV0dHlQcmludGluZzoge2luZGVudFN0cmluZzogJyAgICAnfVxuICB9KTtcbn1cblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
