'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumIosLog = require('appium-ios-log');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.logging);

extensions.startLogCapture = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].warn('Trying to start iOS log capture but it has already started!');
        return context$1$0.abrupt('return');

      case 3:
        this.logs.crashlog = new _appiumIosLog.IOSCrashLog();
        this.logs.syslog = new _appiumIosLog.IOSLog({
          sim: this.opts.device,
          udid: this.isRealDevice() ? this.opts.udid : undefined,
          showLogs: this.opts.showIOSLog
        });
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].warn('Could not capture logs from device. Continuing without capturing logs.');
        return context$1$0.abrupt('return');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

exports['default'] = extensions;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OytCQUE0QixtQkFBbUI7O3NCQUNqQyxRQUFROzs7OzRCQUNjLGdCQUFnQjs7c0JBQ3BDLFdBQVc7Ozs7QUFHM0IsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUVwQixlQUFjLFVBQVUsRUFBRSw2QkFBWSxPQUFPLENBQUMsQ0FBQzs7QUFFL0MsVUFBVSxDQUFDLGVBQWUsR0FBRzs7OztZQUN0QixvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7QUFDdkIsNEJBQUksSUFBSSxDQUFDLDZEQUE2RCxDQUFDLENBQUM7Ozs7QUFHMUUsWUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsK0JBQWlCLENBQUM7QUFDdkMsWUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcseUJBQVc7QUFDNUIsYUFBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUNyQixjQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVM7QUFDdEQsa0JBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7U0FDL0IsQ0FBQyxDQUFDOzs7eUNBRUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozs7O0FBRXJDLDRCQUFJLElBQUksQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDOzs7Ozt5Q0FHL0UsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFOzs7Ozs7O0NBQ3hDLENBQUM7O3FCQUVhLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IElPU0xvZywgSU9TQ3Jhc2hMb2cgfSBmcm9tICdhcHBpdW0taW9zLWxvZyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cblxubGV0IGV4dGVuc2lvbnMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBpb3NDb21tYW5kcy5sb2dnaW5nKTtcblxuZXh0ZW5zaW9ucy5zdGFydExvZ0NhcHR1cmUgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICghXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICBsb2cud2FybignVHJ5aW5nIHRvIHN0YXJ0IGlPUyBsb2cgY2FwdHVyZSBidXQgaXQgaGFzIGFscmVhZHkgc3RhcnRlZCEnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sb2dzLmNyYXNobG9nID0gbmV3IElPU0NyYXNoTG9nKCk7XG4gIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TTG9nKHtcbiAgICBzaW06IHRoaXMub3B0cy5kZXZpY2UsXG4gICAgdWRpZDogdGhpcy5pc1JlYWxEZXZpY2UoKSA/IHRoaXMub3B0cy51ZGlkIDogdW5kZWZpbmVkLFxuICAgIHNob3dMb2dzOiB0aGlzLm9wdHMuc2hvd0lPU0xvZ1xuICB9KTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmxvZ3Muc3lzbG9nLnN0YXJ0Q2FwdHVyZSgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybignQ291bGQgbm90IGNhcHR1cmUgbG9ncyBmcm9tIGRldmljZS4gQ29udGludWluZyB3aXRob3V0IGNhcHR1cmluZyBsb2dzLicpO1xuICAgIHJldHVybjtcbiAgfVxuICBhd2FpdCB0aGlzLmxvZ3MuY3Jhc2hsb2cuc3RhcnRDYXB0dXJlKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
