'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {};

commands.active = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.UnknownError('Command should be proxied to WDA');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeAtom('active_element', []));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Close app (simulate device home button). If a duration is given, app will
 * re-open after that many seconds
 */
commands.background = function callee$0$0(seconds) {
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {};

        if (seconds) {
          params.duration = seconds;
        }
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/deactivateApp', 'POST', params));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/*
 * Simulate Touch ID with either valid (match === true) or invalid (match === false)
 * fingerprint
 */
commands.touchId = function callee$0$0() {
  var match = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
  var params;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = {
          match: match
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.proxyCommand('/simulator/touch_id', 'POST', params));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowSize = function callee$0$0() {
  var windowHandle = arguments.length <= 0 || arguments[0] === undefined ? 'current' : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(windowHandle !== "current")) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');

      case 2:
        if (this.isWebContext()) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand('/window/' + windowHandle + '/size', 'GET'));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.executeAtom('get_window_size', []));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.hideKeyboard = function callee$0$0(strategy) {
  for (var _len = arguments.length, possibleKeys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    possibleKeys[_key - 1] = arguments[_key];
  }

  var keyboard, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, el, buttons;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        keyboard = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false));

      case 4:
        keyboard = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        // no keyboard found
        _logger2['default'].debug('No keyboard found. Unable to hide.');
        return context$1$0.abrupt('return');

      case 11:

        possibleKeys.pop(); // last parameter is the session id
        possibleKeys = possibleKeys.filter(function (element) {
          return !!element;
        }); // get rid of undefined elements

        if (!possibleKeys.length) {
          context$1$0.next = 50;
          break;
        }

        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 17;
        _iterator = _getIterator(possibleKeys);

      case 19:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 34;
          break;
        }

        key = _step.value;
        context$1$0.t1 = _lodash2['default'];
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('accessibility id', key, true, keyboard));

      case 24:
        context$1$0.t2 = context$1$0.sent;
        el = context$1$0.t1.last.call(context$1$0.t1, context$1$0.t2);

        if (!el) {
          context$1$0.next = 31;
          break;
        }

        _logger2['default'].debug('Attempting to hide keyboard by pressing \'' + key + '\' key.');
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(this.nativeClick(el));

      case 30:
        return context$1$0.abrupt('return');

      case 31:
        _iteratorNormalCompletion = true;
        context$1$0.next = 19;
        break;

      case 34:
        context$1$0.next = 40;
        break;

      case 36:
        context$1$0.prev = 36;
        context$1$0.t3 = context$1$0['catch'](17);
        _didIteratorError = true;
        _iteratorError = context$1$0.t3;

      case 40:
        context$1$0.prev = 40;
        context$1$0.prev = 41;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 43:
        context$1$0.prev = 43;

        if (!_didIteratorError) {
          context$1$0.next = 46;
          break;
        }

        throw _iteratorError;

      case 46:
        return context$1$0.finish(43);

      case 47:
        return context$1$0.finish(40);

      case 48:
        context$1$0.next = 56;
        break;

      case 50:
        // find the keyboard, and hit the last Button
        _logger2['default'].debug('Finding keyboard and clicking final button to close');
        context$1$0.next = 53;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, keyboard));

      case 53:
        buttons = context$1$0.sent;
        context$1$0.next = 56;
        return _regeneratorRuntime.awrap(this.nativeClick(_lodash2['default'].last(buttons)));

      case 56:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7], [17, 36, 40, 48], [41,, 43, 47]]);
};

commands.getDeviceTime = _appiumIosDriver.iosCommands.general.getDeviceTime;

commands.getStrings = _appiumIosDriver.iosCommands.general.getStrings;

commands.removeApp = function callee$0$0(bundleId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isRealDevice()) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.opts.device.remove(bundleId));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.opts.device.removeApp(bundleId));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.launchApp = _appiumIosDriver.iosCommands.general.launchApp;

commands.closeApp = _appiumIosDriver.iosCommands.general.closeApp;

exports.commands = commands;
exports['default'] = commands;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7O2dDQUNDLG9CQUFvQjs7K0JBQ2YsbUJBQW1COztzQkFDL0IsV0FBVzs7OztBQUczQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQVEsQ0FBQyxNQUFNLEdBQUc7Ozs7WUFDWCxJQUFJLENBQUMsWUFBWSxFQUFFOzs7OztjQUNoQixJQUFJLHlCQUFPLFlBQVksQ0FBQyxrQ0FBa0MsQ0FBQzs7Ozt5Q0FFdEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7Ozs7Ozs7Ozs7Q0FDcEQsQ0FBQzs7Ozs7O0FBTUYsUUFBUSxDQUFDLFVBQVUsR0FBRyxvQkFBZ0IsT0FBTztNQUN2QyxNQUFNOzs7O0FBQU4sY0FBTSxHQUFHLEVBQUU7O0FBQ2YsWUFBSSxPQUFPLEVBQUU7QUFDWCxnQkFBTSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7U0FDM0I7O3lDQUNZLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQzs7Ozs7Ozs7OztDQUNqRSxDQUFDOzs7Ozs7QUFNRixRQUFRLENBQUMsT0FBTyxHQUFHO01BQWdCLEtBQUsseURBQUcsSUFBSTtNQUN6QyxNQUFNOzs7O0FBQU4sY0FBTSxHQUFHO0FBQ1gsZUFBSyxFQUFMLEtBQUs7U0FDTjs7eUNBQ1ksSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDOzs7Ozs7Ozs7O0NBQ3RFLENBQUM7O0FBRUYsUUFBUSxDQUFDLGFBQWEsR0FBRztNQUFnQixZQUFZLHlEQUFHLFNBQVM7Ozs7Y0FDM0QsWUFBWSxLQUFLLFNBQVMsQ0FBQTs7Ozs7Y0FDdEIsSUFBSSx5QkFBTyxzQkFBc0IsQ0FBQywwREFBMEQsQ0FBQzs7O1lBR2hHLElBQUksQ0FBQyxZQUFZLEVBQUU7Ozs7Ozt5Q0FDVCxJQUFJLENBQUMsWUFBWSxjQUFZLFlBQVksWUFBUyxLQUFLLENBQUM7Ozs7Ozs7eUNBRXhELElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDOzs7Ozs7Ozs7O0NBRXZELENBQUM7O0FBRUYsUUFBUSxDQUFDLFlBQVksR0FBRyxvQkFBZ0IsUUFBUTtvQ0FBSyxZQUFZO0FBQVosZ0JBQVk7OztNQUMzRCxRQUFRLGtGQVlELEdBQUcsRUFDTixFQUFFLEVBVUosT0FBTzs7Ozs7QUF2QlQsZ0JBQVE7Ozt5Q0FFTyxJQUFJLENBQUMsMkJBQTJCLENBQUMsWUFBWSxFQUFFLHlCQUF5QixFQUFFLEtBQUssQ0FBQzs7O0FBQWpHLGdCQUFROzs7Ozs7Ozs7QUFHUiw0QkFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQzs7Ozs7QUFJbEQsb0JBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNuQixvQkFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsVUFBQyxPQUFPO2lCQUFLLENBQUMsQ0FBQyxPQUFPO1NBQUEsQ0FBQyxDQUFDOzthQUN2RCxZQUFZLENBQUMsTUFBTTs7Ozs7Ozs7O2lDQUNMLFlBQVk7Ozs7Ozs7O0FBQW5CLFdBQUc7Ozt5Q0FDWSxJQUFJLENBQUMsMkJBQTJCLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7Ozs7QUFBM0YsVUFBRSxrQkFBSyxJQUFJOzthQUNYLEVBQUU7Ozs7O0FBQ0osNEJBQUksS0FBSyxnREFBNkMsR0FBRyxhQUFTLENBQUM7O3lDQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNOUIsNEJBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7O3lDQUM3QyxJQUFJLENBQUMsMkJBQTJCLENBQUMsWUFBWSxFQUFFLHVCQUF1QixFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7OztBQUF2RyxlQUFPOzt5Q0FDTCxJQUFJLENBQUMsV0FBVyxDQUFDLG9CQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Ozs7OztDQUUxQyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxhQUFhLEdBQUcsNkJBQVksT0FBTyxDQUFDLGFBQWEsQ0FBQzs7QUFFM0QsUUFBUSxDQUFDLFVBQVUsR0FBRyw2QkFBWSxPQUFPLENBQUMsVUFBVSxDQUFDOztBQUVyRCxRQUFRLENBQUMsU0FBUyxHQUFHLG9CQUFnQixRQUFROzs7O2FBQ3ZDLElBQUksQ0FBQyxZQUFZLEVBQUU7Ozs7Ozt5Q0FDZixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOzs7Ozs7Ozt5Q0FFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztDQUU3QyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxTQUFTLEdBQUcsNkJBQVksT0FBTyxDQUFDLFNBQVMsQ0FBQzs7QUFFbkQsUUFBUSxDQUFDLFFBQVEsR0FBRyw2QkFBWSxPQUFPLENBQUMsUUFBUSxDQUFDOztRQUV4QyxRQUFRLEdBQVIsUUFBUTtxQkFDRixRQUFRIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBpb3NDb21tYW5kcyB9IGZyb20gJ2FwcGl1bS1pb3MtZHJpdmVyJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMuYWN0aXZlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcignQ29tbWFuZCBzaG91bGQgYmUgcHJveGllZCB0byBXREEnKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnYWN0aXZlX2VsZW1lbnQnLCBbXSk7XG59O1xuXG4vKipcbiAqIENsb3NlIGFwcCAoc2ltdWxhdGUgZGV2aWNlIGhvbWUgYnV0dG9uKS4gSWYgYSBkdXJhdGlvbiBpcyBnaXZlbiwgYXBwIHdpbGxcbiAqIHJlLW9wZW4gYWZ0ZXIgdGhhdCBtYW55IHNlY29uZHNcbiAqL1xuY29tbWFuZHMuYmFja2dyb3VuZCA9IGFzeW5jIGZ1bmN0aW9uIChzZWNvbmRzKSB7XG4gIGxldCBwYXJhbXMgPSB7fTtcbiAgaWYgKHNlY29uZHMpIHtcbiAgICBwYXJhbXMuZHVyYXRpb24gPSBzZWNvbmRzO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2RlYWN0aXZhdGVBcHAnLCAnUE9TVCcsIHBhcmFtcyk7XG59O1xuXG4vKlxuICogU2ltdWxhdGUgVG91Y2ggSUQgd2l0aCBlaXRoZXIgdmFsaWQgKG1hdGNoID09PSB0cnVlKSBvciBpbnZhbGlkIChtYXRjaCA9PT0gZmFsc2UpXG4gKiBmaW5nZXJwcmludFxuICovXG5jb21tYW5kcy50b3VjaElkID0gYXN5bmMgZnVuY3Rpb24gKG1hdGNoID0gdHJ1ZSkge1xuICBsZXQgcGFyYW1zID0ge1xuICAgIG1hdGNoXG4gIH07XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3NpbXVsYXRvci90b3VjaF9pZCcsICdQT1NUJywgcGFyYW1zKTtcbn07XG5cbmNvbW1hbmRzLmdldFdpbmRvd1NpemUgPSBhc3luYyBmdW5jdGlvbiAod2luZG93SGFuZGxlID0gJ2N1cnJlbnQnKSB7XG4gIGlmICh3aW5kb3dIYW5kbGUgIT09IFwiY3VycmVudFwiKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCdDdXJyZW50bHkgb25seSBnZXR0aW5nIGN1cnJlbnQgd2luZG93IHNpemUgaXMgc3VwcG9ydGVkLicpO1xuICB9XG5cbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvd2luZG93LyR7d2luZG93SGFuZGxlfS9zaXplYCwgJ0dFVCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfd2luZG93X3NpemUnLCBbXSk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmhpZGVLZXlib2FyZCA9IGFzeW5jIGZ1bmN0aW9uIChzdHJhdGVneSwgLi4ucG9zc2libGVLZXlzKSB7XG4gIGxldCBrZXlib2FyZDtcbiAgdHJ5IHtcbiAgICBrZXlib2FyZCA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZUtleWJvYXJkJywgZmFsc2UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBubyBrZXlib2FyZCBmb3VuZFxuICAgIGxvZy5kZWJ1ZygnTm8ga2V5Ym9hcmQgZm91bmQuIFVuYWJsZSB0byBoaWRlLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBvc3NpYmxlS2V5cy5wb3AoKTsgLy8gbGFzdCBwYXJhbWV0ZXIgaXMgdGhlIHNlc3Npb24gaWRcbiAgcG9zc2libGVLZXlzID0gcG9zc2libGVLZXlzLmZpbHRlcigoZWxlbWVudCkgPT4gISFlbGVtZW50KTsgLy8gZ2V0IHJpZCBvZiB1bmRlZmluZWQgZWxlbWVudHNcbiAgaWYgKHBvc3NpYmxlS2V5cy5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgcG9zc2libGVLZXlzKSB7XG4gICAgICBsZXQgZWwgPSBfLmxhc3QoYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoJ2FjY2Vzc2liaWxpdHkgaWQnLCBrZXksIHRydWUsIGtleWJvYXJkKSk7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIGhpZGUga2V5Ym9hcmQgYnkgcHJlc3NpbmcgJyR7a2V5fScga2V5LmApO1xuICAgICAgICBhd2FpdCB0aGlzLm5hdGl2ZUNsaWNrKGVsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBmaW5kIHRoZSBrZXlib2FyZCwgYW5kIGhpdCB0aGUgbGFzdCBCdXR0b25cbiAgICBsb2cuZGVidWcoJ0ZpbmRpbmcga2V5Ym9hcmQgYW5kIGNsaWNraW5nIGZpbmFsIGJ1dHRvbiB0byBjbG9zZScpO1xuICAgIGxldCBidXR0b25zID0gYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlQnV0dG9uJywgdHJ1ZSwga2V5Ym9hcmQpO1xuICAgIGF3YWl0IHRoaXMubmF0aXZlQ2xpY2soXy5sYXN0KGJ1dHRvbnMpKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0RGV2aWNlVGltZSA9IGlvc0NvbW1hbmRzLmdlbmVyYWwuZ2V0RGV2aWNlVGltZTtcblxuY29tbWFuZHMuZ2V0U3RyaW5ncyA9IGlvc0NvbW1hbmRzLmdlbmVyYWwuZ2V0U3RyaW5ncztcblxuY29tbWFuZHMucmVtb3ZlQXBwID0gYXN5bmMgZnVuY3Rpb24gKGJ1bmRsZUlkKSB7XG4gIGlmICh0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5yZW1vdmUoYnVuZGxlSWQpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHRoaXMub3B0cy5kZXZpY2UucmVtb3ZlQXBwKGJ1bmRsZUlkKTtcbiAgfVxufTtcblxuY29tbWFuZHMubGF1bmNoQXBwID0gaW9zQ29tbWFuZHMuZ2VuZXJhbC5sYXVuY2hBcHA7XG5cbmNvbW1hbmRzLmNsb3NlQXBwID0gaW9zQ29tbWFuZHMuZ2VuZXJhbC5jbG9zZUFwcDtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
