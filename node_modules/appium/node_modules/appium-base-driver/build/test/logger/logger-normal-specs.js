require('source-map-support').install();

'use strict';

var _helpers = require('./helpers');

describe('normal logger', function () {
  var writers = undefined,
      log = undefined;
  beforeEach(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false);
    log.level = 'silly';
  });

  afterEach(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should not rewrite log levels outside of testing', function () {
    log.silly('silly');
    (0, _helpers.assertOutputContains)(writers, 'silly');
    log.verbose('verbose');
    (0, _helpers.assertOutputContains)(writers, 'verbose');
    log.verbose('debug');
    (0, _helpers.assertOutputContains)(writers, 'debug');
    log.info('info');
    (0, _helpers.assertOutputContains)(writers, 'info');
    log.http('http');
    (0, _helpers.assertOutputContains)(writers, 'http');
    log.warn('warn');
    (0, _helpers.assertOutputContains)(writers, 'warn');
    log.error('error');
    (0, _helpers.assertOutputContains)(writers, 'error');
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (function () {
      log.errorAndThrow('msg1');
    }).should['throw']('msg1');
    (function () {
      log.errorAndThrow(new Error('msg2'));
    }).should['throw']('msg2');
    (0, _helpers.assertOutputContains)(writers, 'msg1');
    (0, _helpers.assertOutputContains)(writers, 'msg2');
  });
  it('should get and set log levels', function () {
    log.level = 'warn';
    log.level.should.equal('warn');
    log.info('information');
    log.warn('warning');
    (0, _helpers.assertOutputDoesntContain)(writers, 'information');
    (0, _helpers.assertOutputContains)(writers, 'warning');
  });
});

describe('normal logger with prefix', function () {
  var writers = undefined,
      log = undefined;
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false, 'myprefix');
    log.level = 'silly';
  });

  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should not rewrite log levels outside of testing', function () {
    log.silly('silly');
    (0, _helpers.assertOutputContains)(writers, 'silly');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.verbose('verbose');
    (0, _helpers.assertOutputContains)(writers, 'verbose');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.verbose('debug');
    (0, _helpers.assertOutputContains)(writers, 'debug');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.info('info');
    (0, _helpers.assertOutputContains)(writers, 'info');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.http('http');
    (0, _helpers.assertOutputContains)(writers, 'http');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.warn('warn');
    (0, _helpers.assertOutputContains)(writers, 'warn');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.error('error');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (function () {
      log.errorAndThrow('msg');
    }).should['throw']('msg');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
