'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var commands = {},
    helpers = {},
    extensions = {};

commands.getNetworkConnection = function callee$0$0() {
  var airplaneModeOn, connection, wifiOn, dataOn;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info("Getting network connection");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.isAirplaneModeOn());

      case 3:
        airplaneModeOn = context$1$0.sent;
        connection = airplaneModeOn ? 1 : 0;

        if (airplaneModeOn) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.isWifiOn());

      case 8:
        wifiOn = context$1$0.sent;

        connection += wifiOn ? 2 : 0;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.adb.isDataOn());

      case 12:
        dataOn = context$1$0.sent;

        connection += dataOn ? 4 : 0;

      case 14:
        return context$1$0.abrupt('return', connection);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * decoupling to override the behaviour in other drivers like UiAutomator2.
 */
commands.isWifiOn = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isWifiOn());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setNetworkConnection = function callee$0$0(type) {
  var airplaneMode, wifi, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info("Setting network connection");
        // decode the input
        airplaneMode = type % 2;

        type >>= 1;
        wifi = type % 2;

        type >>= 1;
        data = type % 2;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adb.setAirplaneMode(airplaneMode));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adb.broadcastAirplaneMode(airplaneMode));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 10:
        if (airplaneMode) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.setWifiState(wifi));

              case 2:
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(this.adb.setDataState(data));

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.getNetworkConnection());

      case 15:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * decoupling to override behaviour in other drivers like UiAutomator2.
 */
commands.setWifiState = function callee$0$0(wifi) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.setWifiState(wifi));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.toggleData = function callee$0$0() {
  var data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isDataOn());

      case 2:
        data = !context$1$0.sent;

        _logger2['default'].info('Turning network data ' + (data ? 'on' : 'off'));
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adb.setWifiAndData({ data: data }));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.toggleWiFi = function callee$0$0() {
  var wifi;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isWifiOn());

      case 2:
        wifi = !context$1$0.sent;

        _logger2['default'].info('Turning WiFi ' + (wifi ? 'on' : 'off'));
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adb.setWifiAndData({ wifi: wifi }));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3);
        }));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.toggleFlightMode = function callee$0$0() {
  var flightMode;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this4 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.isAirplaneModeOn());

      case 2:
        flightMode = !context$1$0.sent;

        _logger2['default'].info('Turning flight mode ' + (flightMode ? 'on' : 'off'));
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adb.setAirplaneMode(flightMode));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4);
        }));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.adb.broadcastAirplaneMode(flightMode));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4);
        }));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setGeoLocation = function callee$0$0(location) {
  var cmd;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        cmd = ['am', 'startservice', '-e', 'longitude', location.longitude, '-e', 'latitude', location.latitude, 'io.appium.settings/.LocationService'];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.shell(cmd));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.toggleLocationServices = function callee$0$0() {
  var api, seq;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info("Toggling location services");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.getApiLevel());

      case 3:
        api = context$1$0.sent;

        if (!(api > 15)) {
          context$1$0.next = 18;
          break;
        }

        seq = [19, 19];

        if (!(api === 16)) {
          context$1$0.next = 10;
          break;
        }

        // This version of Android has a "parent" button in its action bar
        seq.push(20); // down
        context$1$0.next = 14;
        break;

      case 10:
        if (!(api >= 19)) {
          context$1$0.next = 14;
          break;
        }

        // Newer versions of Android have the toggle in the Action bar
        seq = [22, 22, 19]; // right, right, up
        /*
         * Once the Location services switch is OFF, it won't receive focus
         * when going back to the Location Services settings screen unless we
         * send a dummy keyevent (UP) *before* opening the settings screen
         */
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.adb.keyevent(19));

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.toggleSetting('LOCATION_SOURCE_SETTINGS', seq));

      case 16:
        context$1$0.next = 19;
        break;

      case 18:
        throw new _appiumBaseDriver.errors.NotYetImplementedError();

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.toggleSetting = function callee$0$0(setting, preKeySeq) {
  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, _ref, appPackage, appActivity;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this5 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        /*
         * preKeySeq is the keyevent sequence to send over ADB in order
         * to position the cursor on the right option.
         * By default it's [up, up, down] because we usually target the 1st item in
         * the screen, and sometimes when opening settings activities the cursor is
         * already positionned on the 1st item, but we can't know for sure
         */
        if (_lodash2['default'].isNull(preKeySeq)) {
          preKeySeq = [19, 19, 20]; // up, up, down
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.openSettingsActivity(setting));

      case 3:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 6;
        _iterator = _getIterator(preKeySeq);

      case 8:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 15;
          break;
        }

        key = _step.value;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.doKey(key));

      case 12:
        _iteratorNormalCompletion = true;
        context$1$0.next = 8;
        break;

      case 15:
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 21:
        context$1$0.prev = 21;
        context$1$0.prev = 22;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 24:
        context$1$0.prev = 24;

        if (!_didIteratorError) {
          context$1$0.next = 27;
          break;
        }

        throw _iteratorError;

      case 27:
        return context$1$0.finish(24);

      case 28:
        return context$1$0.finish(21);

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(this.adb.getFocusedPackageAndActivity());

      case 31:
        _ref = context$1$0.sent;
        appPackage = _ref.appPackage;
        appActivity = _ref.appActivity;
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(this.wrapBootstrapDisconnect(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.doKey(23));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this5);
        }));

      case 36:
        context$1$0.prev = 36;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(this.adb.waitForNotActivity(appPackage, appActivity, 5000));

      case 39:
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(this.doKey(22));

      case 41:
        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(this.doKey(23));

      case 43:
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap(this.adb.waitForNotActivity(appPackage, appActivity, 5000));

      case 45:
        context$1$0.next = 49;
        break;

      case 47:
        context$1$0.prev = 47;
        context$1$0.t1 = context$1$0['catch'](36);

      case 49:
        context$1$0.next = 51;
        return _regeneratorRuntime.awrap(this.adb.back());

      case 51:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 17, 21, 29], [22,, 24, 28], [36, 47]]);
};

helpers.doKey = function callee$0$0(key) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(2000));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.adb.keyevent(key));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.wrapBootstrapDisconnect = function callee$0$0(wrapped) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.bootstrap.ignoreUnexpectedShutdown = true;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(wrapped());

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adb.restart());

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.acceptSslCerts));

      case 8:
        context$1$0.prev = 8;

        this.bootstrap.ignoreUnexpectedShutdown = false;
        return context$1$0.finish(8);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1,, 8, 11]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// no need to check anything else if we are in airplane mode

/*
 * TODO: Implement isRealDevice(). This method fails on
 * real devices, it should throw a NotYetImplementedError
 */
// up, up

// There's no global location services toggle on older Android versions

/*
 * Click and handle potential ADB disconnect that occurs on official
 * emulator when the network connection is disabled
 */

/*
 * In one particular case (enable Location Services), a pop-up is
 * displayed on some platforms so the user accepts or refuses that Google
 * collects location data. So we wait for that pop-up to open, if it
 * doesn't then proceed
 */
// right
// click

// TODO: Confirm we need this delay. Seems to work without it.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
