'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersJs = require('../helpers.js');

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var apkUtilsMethods = {};

apkUtilsMethods.isAppInstalled = function callee$0$0(pkg) {
  var installed, apiLevel, thirdparty, stdout, apkInstalledRgx;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        installed = false;

        _loggerJs2['default'].debug('Getting install status for ' + pkg);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 5:
        apiLevel = context$1$0.sent;
        thirdparty = apiLevel >= 15 ? "-3" : "";
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'list', 'packages', thirdparty, pkg]));

      case 9:
        stdout = context$1$0.sent;
        apkInstalledRgx = new RegExp('^package:' + pkg.replace(/(\.)/g, "\\$1") + '$', 'm');

        installed = apkInstalledRgx.test(stdout);
        _loggerJs2['default'].debug('App is ' + (!installed ? " not" : "") + ' installed');
        return context$1$0.abrupt('return', installed);

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error finding if app is installed. Original error: ' + context$1$0.t0.message);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 16]]);
};

apkUtilsMethods.startUri = function callee$0$0(uri, pkg) {
  var args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!uri || !pkg) {
          _loggerJs2['default'].errorAndThrow("URI and package arguments are required");
        }
        context$1$0.prev = 1;
        args = ["am", "start", "-W", "-a", "android.intent.action.VIEW", "-d", uri, pkg];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Error attempting to start URI. Original error: ' + context$1$0.t0);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

apkUtilsMethods.startApp = function callee$0$0() {
  var startAppOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var apiLevel, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        if (!startAppOptions.activity || !startAppOptions.pkg) {
          _loggerJs2['default'].errorAndThrow("activity and pkg is required for launching application");
        }
        startAppOptions = _lodash2['default'].clone(startAppOptions);
        // initializing defaults
        _lodash2['default'].defaults(startAppOptions, {
          waitPkg: startAppOptions.pkg,
          waitActivity: false,
          retry: true,
          stopApp: true
        });
        // preventing null waitpkg
        startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 7:
        apiLevel = context$1$0.sent;
        cmd = (0, _helpersJs.buildStartCmd)(startAppOptions, apiLevel);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 11:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("Error: Activity class") !== -1 && stdout.indexOf("does not exist") !== -1)) {
          context$1$0.next = 23;
          break;
        }

        if (!(startAppOptions.retry && startAppOptions.activity[0] !== ".")) {
          context$1$0.next = 20;
          break;
        }

        _loggerJs2['default'].debug("We tried to start an activity that doesn't exist, " + "retrying with . prepended to activity");
        startAppOptions.activity = '.' + startAppOptions.activity;
        startAppOptions.retry = false;
        return context$1$0.abrupt('return', this.startApp(startAppOptions));

      case 20:
        _loggerJs2['default'].errorAndThrow("Activity used to start app doesn't exist or cannot be " + "launched! Make sure it exists and is a launchable activity");

      case 21:
        context$1$0.next = 24;
        break;

      case 23:
        if (stdout.indexOf("java.lang.SecurityException") !== -1) {
          // if the app is disabled on a real device it will throw a security exception
          _loggerJs2['default'].errorAndThrow("Permission to start activity denied.");
        }

      case 24:
        if (!startAppOptions.waitActivity) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration));

      case 27:
        context$1$0.next = 32;
        break;

      case 29:
        context$1$0.prev = 29;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error occured while starting App. Original error: ' + context$1$0.t0.message);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 29]]);
};

apkUtilsMethods.getFocusedPackageAndActivity = function callee$0$0() {
  var cmd, nullRe, searchRe, stdout, foundNullMatch, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, foundMatch;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Getting focused package and activity");
        cmd = ['dumpsys', 'window', 'windows'];
        nullRe = new RegExp(/mFocusedApp=null/);
        searchRe = new RegExp('mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}');
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 7:
        stdout = context$1$0.sent;
        foundNullMatch = false;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 12;
        _iterator = _getIterator(stdout.split("\n"));

      case 14:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 25;
          break;
        }

        line = _step.value;
        foundMatch = searchRe.exec(line);

        if (!foundMatch) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: foundMatch[1].trim(), appActivity: foundMatch[2].trim() });

      case 21:
        if (nullRe.test(line)) {
          foundNullMatch = true;
        }

      case 22:
        _iteratorNormalCompletion = true;
        context$1$0.next = 14;
        break;

      case 25:
        context$1$0.next = 31;
        break;

      case 27:
        context$1$0.prev = 27;
        context$1$0.t0 = context$1$0['catch'](12);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 31:
        context$1$0.prev = 31;
        context$1$0.prev = 32;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 34:
        context$1$0.prev = 34;

        if (!_didIteratorError) {
          context$1$0.next = 37;
          break;
        }

        throw _iteratorError;

      case 37:
        return context$1$0.finish(34);

      case 38:
        return context$1$0.finish(31);

      case 39:
        if (!foundNullMatch) {
          context$1$0.next = 43;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: null, appActivity: null });

      case 43:
        _loggerJs2['default'].errorAndThrow("Could not parse activity from dumpsys");

      case 44:
        context$1$0.next = 49;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t1 = context$1$0['catch'](4);

        _loggerJs2['default'].errorAndThrow('Could not get focusPackageAndActivity. Original error: ' + context$1$0.t1.message);

      case 49:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 46], [12, 27, 31, 39], [32,, 34, 38]]);
};

apkUtilsMethods.waitForActivityOrNot = function callee$0$0(pkg, activity, not) {
  var waitMs = arguments.length <= 3 || arguments[3] === undefined ? 20000 : arguments[3];

  var endAt, possibleActivityNames, allActivities, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, oneActivity, _loop, _ret, activityMessage;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!pkg || !activity)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Package and activity required.");

      case 2:
        _loggerJs2['default'].debug('Waiting for pkg: \'' + pkg + '\' and activity: \'' + activity + '\'' + ((not ? ' not' : '') + ' to be focused'));
        endAt = Date.now() + waitMs;
        possibleActivityNames = [];
        allActivities = activity.split(",");
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 9;

        for (_iterator2 = _getIterator(allActivities); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          oneActivity = _step2.value;

          oneActivity = oneActivity.trim();
          possibleActivityNames.push.apply(possibleActivityNames, _toConsumableArray((0, _helpersJs.getPossibleActivityNames)(pkg, oneActivity)));
        }
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 17:
        context$1$0.prev = 17;
        context$1$0.prev = 18;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 20:
        context$1$0.prev = 20;

        if (!_didIteratorError2) {
          context$1$0.next = 23;
          break;
        }

        throw _iteratorError2;

      case 23:
        return context$1$0.finish(20);

      case 24:
        return context$1$0.finish(17);

      case 25:
        _loggerJs2['default'].debug('Possible activities, to be checked: ' + possibleActivityNames.join(', '));

        _loop = function callee$1$0() {
          var _ref, appPackage, appActivity, foundAct;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.getFocusedPackageAndActivity());

              case 2:
                _ref = context$2$0.sent;
                appPackage = _ref.appPackage;
                appActivity = _ref.appActivity;

                _loggerJs2['default'].debug('Found package: \'' + appPackage + '\' and activity: \'' + appActivity + '\'');
                foundAct = appPackage === pkg && _lodash2['default'].findIndex(possibleActivityNames, function (possibleActivity) {
                  return possibleActivity === appActivity;
                }) !== -1;

                if (!(!not && foundAct || not && !foundAct)) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', {
                  v: undefined
                });

              case 9:
                _loggerJs2['default'].debug('Incorrect package and activity. Retrying.');
                // cool down so we're not overloading device with requests
                context$2$0.next = 12;
                return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(750));

              case 12:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

      case 27:
        if (!(Date.now() < endAt)) {
          context$1$0.next = 35;
          break;
        }

        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(_loop());

      case 30:
        _ret = context$1$0.sent;

        if (!(typeof _ret === 'object')) {
          context$1$0.next = 33;
          break;
        }

        return context$1$0.abrupt('return', _ret.v);

      case 33:
        context$1$0.next = 27;
        break;

      case 35:
        activityMessage = possibleActivityNames.join(" or ");

        _loggerJs2['default'].errorAndThrow(pkg + '/' + activityMessage + ' never ' + (not ? 'stopped' : 'started'));

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 13, 17, 25], [18,, 20, 24]]);
};

apkUtilsMethods.waitForActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, false, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.waitForNotActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, true, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.uninstallApk = function callee$0$0(pkg) {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Uninstalling ' + pkg);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.forceStop(pkg));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adbExec(['uninstall', pkg], { timeout: 20000 }));

      case 6:
        stdout = context$1$0.sent;

        stdout = stdout.trim();
        // stdout may contain warnings meaning success is not on the first line.

        if (!(stdout.indexOf("Success") !== -1)) {
          context$1$0.next = 13;
          break;
        }

        _loggerJs2['default'].info("App was uninstalled");
        return context$1$0.abrupt('return', true);

      case 13:
        _loggerJs2['default'].info("App was not uninstalled, maybe it wasn't on device?");
        return context$1$0.abrupt('return', false);

      case 15:
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Unable to uninstall APK. Original error: ' + context$1$0.t0.message);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 17]]);
};

apkUtilsMethods.installFromDevicePath = function callee$0$0(apkPathOnDevice) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'install', '-r', apkPathOnDevice], opts));

      case 2:
        stdout = context$1$0.sent;

        if (stdout.indexOf("Failure") !== -1) {
          _loggerJs2['default'].errorAndThrow('Remote install failed: ' + stdout);
        }

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.install = function callee$0$0(apk) {
  var replace = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  var timeout = arguments.length <= 2 || arguments[2] === undefined ? 60000 : arguments[2];
  var apiLevel, targetSdk;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!replace) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['install', '-r', apk], { timeout: timeout }));

      case 3:
        context$1$0.next = 15;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.adbExec(['install', apk], { timeout: timeout }));

      case 8:
        context$1$0.next = 15;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        if (!(context$1$0.t0.message.indexOf('INSTALL_FAILED_ALREADY_EXISTS') === -1)) {
          context$1$0.next = 14;
          break;
        }

        throw context$1$0.t0;

      case 14:
        _loggerJs2['default'].debug('Application \'' + apk + '\' already installed. Continuing.');

      case 15:
        if (!apk.includes('.apk')) {
          context$1$0.next = 31;
          break;
        }

        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 18:
        apiLevel = context$1$0.sent;
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.targetSdkVersionFromManifest(apk));

      case 21:
        targetSdk = context$1$0.sent;

        if (!(apiLevel >= 23 && targetSdk >= 23)) {
          context$1$0.next = 31;
          break;
        }

        context$1$0.t1 = _regeneratorRuntime;
        context$1$0.t2 = this;
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.getPackageName(apk));

      case 27:
        context$1$0.t3 = context$1$0.sent;
        context$1$0.t4 = context$1$0.t2.grantAllPermissions.call(context$1$0.t2, context$1$0.t3);
        context$1$0.next = 31;
        return context$1$0.t1.awrap.call(context$1$0.t1, context$1$0.t4);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

apkUtilsMethods.extractStringsFromApk = function callee$0$0(apk, language, out) {
  var stringsJson, localPath, apkTools, args, fileData, apkStrings, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Extracting strings for language: ' + (language || "default"));
        stringsJson = 'strings.json';
        localPath = undefined;

        if (language) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceLanguage());

      case 6:
        language = context$1$0.sent;

      case 7:
        apkTools = this.jars['appium_apk_tools.jar'];
        args = ['-jar', apkTools, 'stringsFromApk', apk, out, language];
        fileData = undefined, apkStrings = undefined;
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 13:
        context$1$0.next = 21;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](10);

        _loggerJs2['default'].debug('No strings.xml for language \'' + language + '\', getting default ' + 'strings.xml');
        args.pop();
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 21:
        context$1$0.prev = 21;

        _loggerJs2['default'].debug("Reading strings from converted strings.json");
        localPath = _path2['default'].join(out, stringsJson);
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localPath, 'utf8'));

      case 26:
        fileData = context$1$0.sent;

        apkStrings = JSON.parse(fileData);
        context$1$0.next = 35;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t1 = context$1$0['catch'](21);

        if (fileData) {
          _loggerJs2['default'].debug('Content started with: ' + fileData.slice(0, 300));
        }
        msg = 'Could not parse strings from strings.json. Original ' + ('error: ' + context$1$0.t1.message);

        _loggerJs2['default'].errorAndThrow(msg);

      case 35:
        return context$1$0.abrupt('return', { apkStrings: apkStrings, localPath: localPath });

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 15], [21, 30]]);
};

apkUtilsMethods.getDeviceLanguage = function callee$0$0() {
  var language;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        language = undefined;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getDeviceSysLanguage());

      case 7:
        language = context$1$0.sent;

        if (language) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getDeviceProductLanguage());

      case 11:
        language = context$1$0.sent;

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 16:
        language = context$1$0.sent.split("-")[0];

      case 17:
        return context$1$0.abrupt('return', language);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceLanguage = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLanguage(language));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getDeviceCountry = function callee$0$0() {
  var country;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysCountry());

      case 2:
        country = context$1$0.sent;

        if (country) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductCountry());

      case 6:
        country = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', country);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceCountry = function callee$0$0(country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysCountry(country));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getDeviceLocale = function callee$0$0() {
  var locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysLocale());

      case 2:
        locale = context$1$0.sent;

        if (locale) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductLocale());

      case 6:
        locale = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', locale);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceLocale = function callee$0$0(locale) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocale(locale));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getPackageName = function callee$0$0(apk) {
  var args, _ref2, stdout, apkPackage;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['dump', 'badging', apk];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 5:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

        if (apkPackage && apkPackage.length >= 2) {
          apkPackage = apkPackage[1];
        } else {
          apkPackage = null;
        }
        return context$1$0.abrupt('return', apkPackage);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = apkUtilsMethods;
module.exports = exports['default'];
// https://regex101.com/r/xZ8vF7/1

// on some systems this will throw an error if the app already
// exists

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API >= 23

// this method is only used in API >= 23
//# sourceMappingURL=data:application/json;charset=utf8;base64,
