'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _helpersJs = require('../helpers.js');

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var helperJarPath = _path2['default'].resolve(__dirname, '..', '..', '..', 'jars');
var manifestMethods = {};

// android:process= may be defined in AndroidManifest.xml
// http://developer.android.com/reference/android/R.attr.html#process
// note that the process name when used with ps must be truncated to the last 15 chars
// ps -c com.example.android.apis becomes ps -c le.android.apis
manifestMethods.processFromManifest = function callee$0$0(localApk) {
  var args, _ref, stdout, result, lines, applicationRegex, applicationFound, attributeRegex, processRegex, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, notAttribute, _process;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        _loggerJs2['default'].info("Retrieving process from manifest");
        args = ['dump', 'xmltree', localApk, 'AndroidManifest.xml'];
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 7:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        result = null;
        lines = stdout.split("\n");
        applicationRegex = new RegExp(/\s+E: application \(line=\d+\).*/);
        applicationFound = false;
        attributeRegex = new RegExp(/\s+A: .+/);
        processRegex = new RegExp(/\s+A: android:process\(0x01010011\)="([^"]+).*"/);
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 18;
        _iterator = _getIterator(lines);

      case 20:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 37;
          break;
        }

        line = _step.value;

        if (applicationFound) {
          context$1$0.next = 26;
          break;
        }

        if (applicationRegex.test(line)) {
          applicationFound = true;
        }
        context$1$0.next = 34;
        break;

      case 26:
        notAttribute = !attributeRegex.test(line);

        if (!notAttribute) {
          context$1$0.next = 29;
          break;
        }

        return context$1$0.abrupt('break', 37);

      case 29:
        _process = processRegex.exec(line);

        if (!(_process && _process.length > 1)) {
          context$1$0.next = 34;
          break;
        }

        result = _process[1];
        // must trim to last 15 for android's ps binary
        if (result.length > 15) {
          result = result.substr(result.length - 15);
        }
        return context$1$0.abrupt('break', 37);

      case 34:
        _iteratorNormalCompletion = true;
        context$1$0.next = 20;
        break;

      case 37:
        context$1$0.next = 43;
        break;

      case 39:
        context$1$0.prev = 39;
        context$1$0.t0 = context$1$0['catch'](18);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 43:
        context$1$0.prev = 43;
        context$1$0.prev = 44;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 46:
        context$1$0.prev = 46;

        if (!_didIteratorError) {
          context$1$0.next = 49;
          break;
        }

        throw _iteratorError;

      case 49:
        return context$1$0.finish(46);

      case 50:
        return context$1$0.finish(43);

      case 51:
        return context$1$0.abrupt('return', result);

      case 54:
        context$1$0.prev = 54;
        context$1$0.t1 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('processFromManifest failed. Original error: ' + context$1$0.t1.message);

      case 57:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 54], [18, 39, 43, 51], [44,, 46, 50]]);
};

manifestMethods.packageAndLaunchActivityFromManifest = function callee$0$0(localApk) {
  var args, _ref2, stdout, apkPackage, apkActivity, outputPath, getLaunchActivity, _ref3, _stdout, stderr, act;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        _loggerJs2['default'].info("Extracting package and launch activity from manifest");
        args = ['dump', 'badging', localApk];
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 7:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

        if (apkPackage && apkPackage.length >= 2) {
          apkPackage = apkPackage[1];
        } else {
          apkPackage = null;
        }
        apkActivity = new RegExp(/launchable-activity: name='([^']+)'/g).exec(stdout);

        if (!(apkActivity && apkActivity.length >= 2)) {
          context$1$0.next = 16;
          break;
        }

        apkActivity = apkActivity[1];
        context$1$0.next = 26;
        break;

      case 16:
        outputPath = _path2['default'].resolve(this.tmpDir, apkPackage);
        getLaunchActivity = ['-jar', this.jars['appium_apk_tools.jar'], 'printLaunchActivity', this.opts.app, outputPath];
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', getLaunchActivity));

      case 20:
        _ref3 = context$1$0.sent;
        _stdout = _ref3.stdout;
        stderr = _ref3.stderr;

        if (stderr) {
          _loggerJs2['default'].errorAndThrow('Cannot parse launchActivity from manifest: ' + stderr);
        }
        act = new RegExp(/Launch activity parsed:([^']+)/g).exec(_stdout);

        if (act && act.length >= 2) {
          apkActivity = act[1];
        }

      case 26:
        _loggerJs2['default'].debug('badging package: ' + apkPackage);
        _loggerJs2['default'].debug('badging act: ' + apkActivity);
        return context$1$0.abrupt('return', { apkPackage: apkPackage, apkActivity: apkActivity });

      case 31:
        context$1$0.prev = 31;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('packageAndLaunchActivityFromManifest failed. Original error: ' + context$1$0.t0.message);

      case 34:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 31]]);
};

manifestMethods.targetSdkVersionFromManifest = function callee$0$0(localApk) {
  var args, _ref4, stdout, targetSdkVersion;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        _loggerJs2['default'].info("Extracting package and launch activity from manifest");
        args = ['dump', 'badging', localApk];
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 7:
        _ref4 = context$1$0.sent;
        stdout = _ref4.stdout;
        targetSdkVersion = new RegExp(/targetSdkVersion:'([^']+)'/g).exec(stdout);
        return context$1$0.abrupt('return', parseInt(targetSdkVersion[1], 10));

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('targetSdkVersionFromManifest failed. Original error: ' + context$1$0.t0.message);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 13]]);
};

manifestMethods.compileManifest = function callee$0$0(manifest, manifestPackage, targetPackage) {
  var _ref5, platform, platformPath, args;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Compiling manifest ' + manifest);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _helpersJs.getAndroidPlatformAndPath)());

      case 3:
        _ref5 = context$1$0.sent;
        platform = _ref5.platform;
        platformPath = _ref5.platformPath;

        if (platform) {
          context$1$0.next = 8;
          break;
        }

        return context$1$0.abrupt('return', new Error("Required platform doesn't exist (API level >= 17)"));

      case 8:
        _loggerJs2['default'].debug('Compiling manifest.');
        context$1$0.prev = 9;
        args = ['package', '-M', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', _path2['default'].resolve(platformPath, 'android.jar'), '-F', manifest + '.apk', '-f'];
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, args));

      case 13:
        _loggerJs2['default'].debug("Compiled manifest");
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](9);

        _loggerJs2['default'].errorAndThrow('Error compiling manifest. Original error: ' + context$1$0.t0.message);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 16]]);
};

manifestMethods.insertManifest = function callee$0$0(manifest, srcApk, dstApk) {
  var java, args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Inserting manifest, src: ' + srcApk + ' dst: ' + dstApk);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _helpersJs.unzipFile)(manifest + '.apk'));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(srcApk, dstApk));

      case 6:
        _loggerJs2['default'].debug("Testing new tmp apk");
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _helpersJs.assertZipArchive)(dstApk));

      case 9:
        _loggerJs2['default'].debug("Moving manifest");

        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 17;
          break;
        }

        java = _path2['default'].resolve(process.env.JAVA_HOME, 'bin', 'java');
        args = ['-jar', _path2['default'].resolve(helperJarPath, 'move_manifest.jar'), dstApk, manifest];
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(java, args));

      case 15:
        context$1$0.next = 19;
        break;

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('zip', ['-j', '-m', dstApk, manifest]));

      case 19:
        _loggerJs2['default'].debug("Inserted manifest.");
        context$1$0.next = 25;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Error inserting manifest. Original error: ' + context$1$0.t0.message);

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 22]]);
};

manifestMethods.hasInternetPermissionFromManifest = function callee$0$0(localApk) {
  var _ref6, stdout;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initAapt());

      case 3:
        _loggerJs2['default'].debug("Checking if has internet permission from manifest");
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.aapt, ['dump', 'badging', localApk]));

      case 6:
        _ref6 = context$1$0.sent;
        stdout = _ref6.stdout;
        return context$1$0.abrupt('return', new RegExp(/uses-permission:.*'android.permission.INTERNET'/).test(stdout));

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error checking internet permission for manifest. Original error: ' + context$1$0.t0.message);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 11]]);
};

exports['default'] = manifestMethods;
module.exports = exports['default'];

// process must be an attribute after application.

// this is an application attribute process.

// Insert compiled manifest into /tmp/appPackage.clean.apk
// -j = keep only the file, not the dirs
// -m = move manifest into target apk.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hbmRyb2lkLW1hbmlmZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs0QkFBcUIsY0FBYzs7d0JBQ25CLGNBQWM7Ozs7eUJBQ3lDLGVBQWU7OzZCQUMzRCxnQkFBZ0I7O29CQUMxQixNQUFNOzs7O0FBRXZCLElBQU0sYUFBYSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEUsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDOzs7Ozs7QUFNekIsZUFBZSxDQUFDLG1CQUFtQixHQUFHLG9CQUFnQixRQUFRO01BSXRELElBQUksUUFDSCxNQUFNLEVBQ1AsTUFBTSxFQUNOLEtBQUssRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxZQUFZLGtGQUNQLElBQUksRUFNTCxZQUFZLEVBS1osUUFBTzs7Ozs7Ozt5Q0FyQlQsSUFBSSxDQUFDLFFBQVEsRUFBRTs7O0FBQ3JCLDhCQUFJLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBQ3pDLFlBQUksR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixDQUFDOzt5Q0FDMUMsd0JBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDOzs7O0FBQTlDLGNBQU0sUUFBTixNQUFNO0FBQ1AsY0FBTSxHQUFHLElBQUk7QUFDYixhQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDMUIsd0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUMsa0NBQWtDLENBQUM7QUFDakUsd0JBQWdCLEdBQUcsS0FBSztBQUN4QixzQkFBYyxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQztBQUN2QyxvQkFBWSxHQUFHLElBQUksTUFBTSxDQUFDLGlEQUFpRCxDQUFDOzs7OztpQ0FDL0QsS0FBSzs7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QUUsSUFBSSxDQUFDOzs7Ozs7Ozt5Q0FLaEIsd0JBQUssS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7OztBQUVuRCw4QkFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQzs7Ozs7Ozs7QUFFaEMsOEJBQUksYUFBYSxnREFBOEMsZUFBRSxPQUFPLENBQUcsQ0FBQzs7Ozs7OztDQUUvRSxDQUFDOztBQUVGLGVBQWUsQ0FBQyxpQ0FBaUMsR0FBRyxvQkFBZ0IsUUFBUTthQUluRSxNQUFNOzs7Ozs7O3lDQUZMLElBQUksQ0FBQyxRQUFRLEVBQUU7OztBQUNyQiw4QkFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQzs7eUNBQzFDLHdCQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQzs7OztBQUF2RSxjQUFNLFNBQU4sTUFBTTs0Q0FDSixJQUFJLE1BQU0sQ0FBQyxpREFBaUQsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7OztBQUVqRiw4QkFBSSxhQUFhLHVFQUFxRSxlQUFFLE9BQU8sQ0FBRyxDQUFDOzs7Ozs7O0NBRXRHLENBQUM7O3FCQUdhLGVBQWUiLCJmaWxlIjoibGliL3Rvb2xzL2FuZHJvaWQtbWFuaWZlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGdldEFuZHJvaWRQbGF0Zm9ybUFuZFBhdGgsIHVuemlwRmlsZSwgYXNzZXJ0WmlwQXJjaGl2ZSB9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuaW1wb3J0IHsgc3lzdGVtLCBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBoZWxwZXJKYXJQYXRoID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJy4uJywgJ2phcnMnKTtcbmxldCBtYW5pZmVzdE1ldGhvZHMgPSB7fTtcblxuLy8gYW5kcm9pZDpwcm9jZXNzPSBtYXkgYmUgZGVmaW5lZCBpbiBBbmRyb2lkTWFuaWZlc3QueG1sXG4vLyBodHRwOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3JlZmVyZW5jZS9hbmRyb2lkL1IuYXR0ci5odG1sI3Byb2Nlc3Ncbi8vIG5vdGUgdGhhdCB0aGUgcHJvY2VzcyBuYW1lIHdoZW4gdXNlZCB3aXRoIHBzIG11c3QgYmUgdHJ1bmNhdGVkIHRvIHRoZSBsYXN0IDE1IGNoYXJzXG4vLyBwcyAtYyBjb20uZXhhbXBsZS5hbmRyb2lkLmFwaXMgYmVjb21lcyBwcyAtYyBsZS5hbmRyb2lkLmFwaXNcbm1hbmlmZXN0TWV0aG9kcy5wcm9jZXNzRnJvbU1hbmlmZXN0ID0gYXN5bmMgZnVuY3Rpb24gKGxvY2FsQXBrKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5pbml0QWFwdCgpO1xuICAgIGxvZy5pbmZvKFwiUmV0cmlldmluZyBwcm9jZXNzIGZyb20gbWFuaWZlc3RcIik7XG4gICAgbGV0IGFyZ3MgPSBbJ2R1bXAnLCAneG1sdHJlZScsIGxvY2FsQXBrLCAnQW5kcm9pZE1hbmlmZXN0LnhtbCddO1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy5hYXB0LCBhcmdzKTtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBsZXQgbGluZXMgPSBzdGRvdXQuc3BsaXQoXCJcXG5cIik7XG4gICAgbGV0IGFwcGxpY2F0aW9uUmVnZXggPSBuZXcgUmVnRXhwKC9cXHMrRTogYXBwbGljYXRpb24gXFwobGluZT1cXGQrXFwpLiovKTtcbiAgICBsZXQgYXBwbGljYXRpb25Gb3VuZCA9IGZhbHNlO1xuICAgIGxldCBhdHRyaWJ1dGVSZWdleCA9IG5ldyBSZWdFeHAoL1xccytBOiAuKy8pO1xuICAgIGxldCBwcm9jZXNzUmVnZXggPSBuZXcgUmVnRXhwKC9cXHMrQTogYW5kcm9pZDpwcm9jZXNzXFwoMHgwMTAxMDAxMVxcKT1cIihbXlwiXSspLipcIi8pO1xuICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgIGlmICghYXBwbGljYXRpb25Gb3VuZCkge1xuICAgICAgICBpZiAoYXBwbGljYXRpb25SZWdleC50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgYXBwbGljYXRpb25Gb3VuZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBub3RBdHRyaWJ1dGUgPSAhYXR0cmlidXRlUmVnZXgudGVzdChsaW5lKTtcbiAgICAgICAgLy8gcHJvY2VzcyBtdXN0IGJlIGFuIGF0dHJpYnV0ZSBhZnRlciBhcHBsaWNhdGlvbi5cbiAgICAgICAgaWYgKG5vdEF0dHJpYnV0ZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwcm9jZXNzID0gcHJvY2Vzc1JlZ2V4LmV4ZWMobGluZSk7XG4gICAgICAgIC8vIHRoaXMgaXMgYW4gYXBwbGljYXRpb24gYXR0cmlidXRlIHByb2Nlc3MuXG4gICAgICAgIGlmIChwcm9jZXNzICYmIHByb2Nlc3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHByb2Nlc3NbMV07XG4gICAgICAgICAgLy8gbXVzdCB0cmltIHRvIGxhc3QgMTUgZm9yIGFuZHJvaWQncyBwcyBiaW5hcnlcbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDE1KSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyKHJlc3VsdC5sZW5ndGggLSAxNSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgcHJvY2Vzc0Zyb21NYW5pZmVzdCBmYWlsZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxubWFuaWZlc3RNZXRob2RzLnBhY2thZ2VBbmRMYXVuY2hBY3Rpdml0eUZyb21NYW5pZmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChsb2NhbEFwaykge1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW5pdEFhcHQoKTtcbiAgICBsb2cuaW5mbyhcIkV4dHJhY3RpbmcgcGFja2FnZSBhbmQgbGF1bmNoIGFjdGl2aXR5IGZyb20gbWFuaWZlc3RcIik7XG4gICAgbGV0IGFyZ3MgPSBbJ2R1bXAnLCAnYmFkZ2luZycsIGxvY2FsQXBrXTtcbiAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKHRoaXMuYmluYXJpZXMuYWFwdCwgYXJncyk7XG4gICAgbGV0IGFwa1BhY2thZ2UgPSBuZXcgUmVnRXhwKC9wYWNrYWdlOiBuYW1lPScoW14nXSspJy9nKS5leGVjKHN0ZG91dCk7XG4gICAgaWYgKGFwa1BhY2thZ2UgJiYgYXBrUGFja2FnZS5sZW5ndGggPj0gMikge1xuICAgICAgYXBrUGFja2FnZSA9IGFwa1BhY2thZ2VbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwa1BhY2thZ2UgPSBudWxsO1xuICAgIH1cbiAgICBsZXQgYXBrQWN0aXZpdHkgPSBuZXcgUmVnRXhwKC9sYXVuY2hhYmxlLWFjdGl2aXR5OiBuYW1lPScoW14nXSspJy9nKS5leGVjKHN0ZG91dCk7XG4gICAgaWYgKGFwa0FjdGl2aXR5ICYmIGFwa0FjdGl2aXR5Lmxlbmd0aCA+PSAyKSB7XG4gICAgICBhcGtBY3Rpdml0eSA9IGFwa0FjdGl2aXR5WzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgb3V0cHV0UGF0aCA9IHBhdGgucmVzb2x2ZSh0aGlzLnRtcERpciwgYXBrUGFja2FnZSk7XG4gICAgICBsZXQgZ2V0TGF1bmNoQWN0aXZpdHkgPSBbJy1qYXInLCB0aGlzLmphcnNbJ2FwcGl1bV9hcGtfdG9vbHMuamFyJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByaW50TGF1bmNoQWN0aXZpdHknLCB0aGlzLm9wdHMuYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFBhdGhdO1xuICAgICAgbGV0IHtzdGRvdXQsIHN0ZGVycn0gPSBhd2FpdCBleGVjKCdqYXZhJywgZ2V0TGF1bmNoQWN0aXZpdHkpO1xuICAgICAgaWYgKHN0ZGVycikge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ2Fubm90IHBhcnNlIGxhdW5jaEFjdGl2aXR5IGZyb20gbWFuaWZlc3Q6ICR7c3RkZXJyfWApO1xuICAgICAgfVxuICAgICAgbGV0IGFjdCA9IG5ldyBSZWdFeHAoL0xhdW5jaCBhY3Rpdml0eSBwYXJzZWQ6KFteJ10rKS9nKS5leGVjKHN0ZG91dCk7XG4gICAgICBpZiAoYWN0ICYmIGFjdC5sZW5ndGggPj0gMikge1xuICAgICAgICBhcGtBY3Rpdml0eSA9IGFjdFsxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmRlYnVnKGBiYWRnaW5nIHBhY2thZ2U6ICR7YXBrUGFja2FnZX1gKTtcbiAgICBsb2cuZGVidWcoYGJhZGdpbmcgYWN0OiAke2Fwa0FjdGl2aXR5fWApO1xuICAgIHJldHVybiB7YXBrUGFja2FnZSwgYXBrQWN0aXZpdHl9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYHBhY2thZ2VBbmRMYXVuY2hBY3Rpdml0eUZyb21NYW5pZmVzdCBmYWlsZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxubWFuaWZlc3RNZXRob2RzLnRhcmdldFNka1ZlcnNpb25Gcm9tTWFuaWZlc3QgPSBhc3luYyBmdW5jdGlvbiAobG9jYWxBcGspIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmluaXRBYXB0KCk7XG4gICAgbG9nLmluZm8oXCJFeHRyYWN0aW5nIHBhY2thZ2UgYW5kIGxhdW5jaCBhY3Rpdml0eSBmcm9tIG1hbmlmZXN0XCIpO1xuICAgIGxldCBhcmdzID0gWydkdW1wJywgJ2JhZGdpbmcnLCBsb2NhbEFwa107XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyh0aGlzLmJpbmFyaWVzLmFhcHQsIGFyZ3MpO1xuICAgIGxldCB0YXJnZXRTZGtWZXJzaW9uID0gbmV3IFJlZ0V4cCgvdGFyZ2V0U2RrVmVyc2lvbjonKFteJ10rKScvZykuZXhlYyhzdGRvdXQpO1xuICAgIHJldHVybiBwYXJzZUludCh0YXJnZXRTZGtWZXJzaW9uWzFdLCAxMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgdGFyZ2V0U2RrVmVyc2lvbkZyb21NYW5pZmVzdCBmYWlsZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxubWFuaWZlc3RNZXRob2RzLmNvbXBpbGVNYW5pZmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChtYW5pZmVzdCwgbWFuaWZlc3RQYWNrYWdlLCB0YXJnZXRQYWNrYWdlKSB7XG4gIGxvZy5kZWJ1ZyhgQ29tcGlsaW5nIG1hbmlmZXN0ICR7bWFuaWZlc3R9YCk7XG4gIGxldCB7cGxhdGZvcm0sIHBsYXRmb3JtUGF0aH0gPSBhd2FpdCBnZXRBbmRyb2lkUGxhdGZvcm1BbmRQYXRoKCk7XG4gIGlmICghcGxhdGZvcm0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiUmVxdWlyZWQgcGxhdGZvcm0gZG9lc24ndCBleGlzdCAoQVBJIGxldmVsID49IDE3KVwiKTtcbiAgfVxuICBsb2cuZGVidWcoJ0NvbXBpbGluZyBtYW5pZmVzdC4nKTtcbiAgdHJ5IHtcbiAgICBsZXQgYXJncyA9IFsncGFja2FnZScsICctTScsIG1hbmlmZXN0LCAnLS1yZW5hbWUtbWFuaWZlc3QtcGFja2FnZScsXG4gICAgICAgICAgICAgICAgbWFuaWZlc3RQYWNrYWdlLCAnLS1yZW5hbWUtaW5zdHJ1bWVudGF0aW9uLXRhcmdldC1wYWNrYWdlJyxcbiAgICAgICAgICAgICAgICB0YXJnZXRQYWNrYWdlLCAnLUknLCBwYXRoLnJlc29sdmUocGxhdGZvcm1QYXRoLCAnYW5kcm9pZC5qYXInKSxcbiAgICAgICAgICAgICAgICAnLUYnLCBtYW5pZmVzdCArICcuYXBrJywgJy1mJ107XG4gICAgYXdhaXQgZXhlYyh0aGlzLmJpbmFyaWVzLmFhcHQsIGFyZ3MpO1xuICAgIGxvZy5kZWJ1ZyhcIkNvbXBpbGVkIG1hbmlmZXN0XCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgRXJyb3IgY29tcGlsaW5nIG1hbmlmZXN0LiBPcmlnaW5hbCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcblxubWFuaWZlc3RNZXRob2RzLmluc2VydE1hbmlmZXN0ID0gYXN5bmMgZnVuY3Rpb24gKG1hbmlmZXN0LCBzcmNBcGssIGRzdEFwaykge1xuICBsb2cuZGVidWcoYEluc2VydGluZyBtYW5pZmVzdCwgc3JjOiAke3NyY0Fwa30gZHN0OiAke2RzdEFwa31gKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB1bnppcEZpbGUoYCR7bWFuaWZlc3R9LmFwa2ApO1xuICAgIGF3YWl0IGZzLmNvcHlGaWxlKHNyY0FwaywgZHN0QXBrKTtcbiAgICBsb2cuZGVidWcoXCJUZXN0aW5nIG5ldyB0bXAgYXBrXCIpO1xuICAgIGF3YWl0IGFzc2VydFppcEFyY2hpdmUoZHN0QXBrKTtcbiAgICBsb2cuZGVidWcoXCJNb3ZpbmcgbWFuaWZlc3RcIik7XG4gICAgaWYgKHN5c3RlbS5pc1dpbmRvd3MoKSkge1xuICAgICAgbGV0IGphdmEgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSkFWQV9IT01FLCAnYmluJywgJ2phdmEnKTtcbiAgICAgIGxldCBhcmdzID0gWyctamFyJywgIHBhdGgucmVzb2x2ZShoZWxwZXJKYXJQYXRoLCAnbW92ZV9tYW5pZmVzdC5qYXInKSxcbiAgICAgICAgICAgICAgICAgIGRzdEFwaywgbWFuaWZlc3RdO1xuICAgICAgYXdhaXQgZXhlYyhqYXZhLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW5zZXJ0IGNvbXBpbGVkIG1hbmlmZXN0IGludG8gL3RtcC9hcHBQYWNrYWdlLmNsZWFuLmFwa1xuICAgICAgLy8gLWogPSBrZWVwIG9ubHkgdGhlIGZpbGUsIG5vdCB0aGUgZGlyc1xuICAgICAgLy8gLW0gPSBtb3ZlIG1hbmlmZXN0IGludG8gdGFyZ2V0IGFway5cbiAgICAgIGF3YWl0IGV4ZWMoJ3ppcCcsIFsnLWonLCAnLW0nLCBkc3RBcGssIG1hbmlmZXN0XSk7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhcIkluc2VydGVkIG1hbmlmZXN0LlwiKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBpbnNlcnRpbmcgbWFuaWZlc3QuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxubWFuaWZlc3RNZXRob2RzLmhhc0ludGVybmV0UGVybWlzc2lvbkZyb21NYW5pZmVzdCA9IGFzeW5jIGZ1bmN0aW9uIChsb2NhbEFwaykge1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW5pdEFhcHQoKTtcbiAgICBsb2cuZGVidWcoXCJDaGVja2luZyBpZiBoYXMgaW50ZXJuZXQgcGVybWlzc2lvbiBmcm9tIG1hbmlmZXN0XCIpO1xuICAgIGxldCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWModGhpcy5iaW5hcmllcy5hYXB0LCBbJ2R1bXAnLCAnYmFkZ2luZycsIGxvY2FsQXBrXSk7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoL3VzZXMtcGVybWlzc2lvbjouKidhbmRyb2lkLnBlcm1pc3Npb24uSU5URVJORVQnLykudGVzdChzdGRvdXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEVycm9yIGNoZWNraW5nIGludGVybmV0IHBlcm1pc3Npb24gZm9yIG1hbmlmZXN0LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgbWFuaWZlc3RNZXRob2RzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
