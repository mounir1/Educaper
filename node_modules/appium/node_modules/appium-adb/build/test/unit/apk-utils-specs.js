'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].use(_chaiAsPromised2['default']);
var should = _chai2['default'].should(),
    pkg = 'com.example.android.contactmanager',
    uri = 'content://contacts/people/1',
    act = '.ContactManager',
    startAppOptions = { stopApp: true, action: 'action', category: 'cat',
  flags: 'flags', pkg: 'pkg', activity: 'act',
  optionalIntentArguments: '-x options -y option argument -z option arg with spaces' },
    cmd = ['am', 'start', '-W', '-n', 'pkg/act', '-S', '-a', 'action', '-c', 'cat', '-f', 'flags', '-x', 'options', '-y', 'option', 'argument', '-z', 'option', 'arg with spaces'],
    language = 'en',
    country = 'US',
    locale = 'en-US';

describe('Apk-utils', function () {
  var adb = new _2['default']();
  describe('isAppInstalled', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should parse correctly and return true', function callee$2$0() {
      var pkg;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pkg = 'dummy.package';

            mocks.adb.expects('getApiLevel').once().withExactArgs().returns("17");
            mocks.adb.expects('shell').once().withExactArgs(['pm', 'list', 'packages', '-3', pkg]).returns('package:' + pkg);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.isAppInstalled(pkg));

          case 5:
            context$3$0.sent.should.be['true'];

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should parse correctly and return false', function callee$2$0() {
      var pkg;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pkg = 'dummy.package';

            mocks.adb.expects('getApiLevel').once().withExactArgs().returns("17");
            mocks.adb.expects('shell').once().withExactArgs(['pm', 'list', 'packages', '-3', pkg]).returns("");
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.isAppInstalled(pkg));

          case 5:
            context$3$0.sent.should.be['false'];

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getFocusedPackageAndActivity', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should parse correctly and return package and activity', function callee$2$0() {
      var _ref, appPackage, appActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

          case 3:
            _ref = context$3$0.sent;
            appPackage = _ref.appPackage;
            appActivity = _ref.appActivity;

            appPackage.should.equal(pkg);
            appActivity.should.equal(act);
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should parse correctly and return package and activity when a comma is present', function callee$2$0() {
      var _ref2, appPackage, appActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{20fe217e token=Token{21878739 ' + ('ActivityRecord{16425300 u0 ' + pkg + '/' + act + ', isShadow:false t10}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

          case 3:
            _ref2 = context$3$0.sent;
            appPackage = _ref2.appPackage;
            appActivity = _ref2.appActivity;

            appPackage.should.equal(pkg);
            appActivity.should.equal(act);
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should parse correctly and return null', function callee$2$0() {
      var _ref3, appPackage, appActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=null');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

          case 3:
            _ref3 = context$3$0.sent;
            appPackage = _ref3.appPackage;
            appActivity = _ref3.appActivity;

            should.not.exist(appPackage);
            should.not.exist(appActivity);
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('waitForActivityOrNot', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell once and should return', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell multiple times and return', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').onCall(0).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2c7c4318 u0 foo/bar t181}}}');
            mocks.adb.expects('shell').returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2c7c4318 u0 com.example.android.contactmanager/.ContactManager t181}}}');

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, false));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell once return for not', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{c 0 foo/bar t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, true));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell multiple times and return for not', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').onCall(0).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));
            mocks.adb.expects('shell').returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2c7c4318 u0 foo/bar t181}}}');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, true));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get first of a comma-separated list of activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.ContactManager, .OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get second of a comma-separated list of activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.OtherManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.ContactManager, .OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should fail if no activity in a comma-separated list is available', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').atLeast(1).withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.SuperManager, .OtherManager', false, 1000).should.eventually.be.rejected);

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('waitForActivity', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call waitForActivityOrNot with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('waitForActivityOrNot').once().withExactArgs(pkg, act, false, 20000).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivity(pkg, act));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('waitForNotActivity', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call waitForActivityOrNot with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('waitForActivityOrNot').once().withExactArgs(pkg, act, true, 20000).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForNotActivity(pkg, act));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('uninstallApk', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call forceStop and adbExec with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('forceStop').once().withExactArgs(pkg).returns('');
            mocks.adb.expects('adbExec').once().withExactArgs(['uninstall', pkg], { timeout: 20000 }).returns('Success');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.uninstallApk(pkg));

          case 4:
            context$3$0.sent.should.be['true'];

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('installFromDevicePath', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call forceStop and adbExec with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['pm', 'install', '-r', 'foo'], {}).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.installFromDevicePath('foo'));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('install', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call forceStop and adbExec with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('adbExec').once().withExactArgs(['install', '-r', 'foo'], { timeout: 60000 }).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.install('foo'));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call forceStop and adbExec with correct arguments when not replacing', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('adbExec').once().withExactArgs(['install', 'foo'], { timeout: 60000 }).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.install('foo', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('startUri', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should fail if uri or pkg are not provided', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(adb.startUri().should.eventually.be.rejectedWith(/arguments are required/));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.startUri('foo').should.eventually.be.rejectedWith(/arguments are required/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should build a call to a VIEW intent with the uri', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['am', 'start', '-W', '-a', 'android.intent.action.VIEW', '-d', uri, pkg]);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.startUri(uri, pkg));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('startApp', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call getApiLevel and shell with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').once().withExactArgs().returns('17');
            mocks.adb.expects('shell').once().withExactArgs(cmd).returns('');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.startApp(startAppOptions));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call getApiLevel and shell with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').twice().returns('17');
            mocks.adb.expects('shell').onCall(0).returns('Error: Activity class foo does not exist');
            mocks.adb.expects('shell').returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.startApp(startAppOptions));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getDeviceLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args and return language when API < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(18);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.language']).returns(language);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 4:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return language when API < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(18);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.language']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale.language']).returns(language);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 5:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell one time with correct args and return language when API = 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(23);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns(locale);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 4:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return language when API = 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(23);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale']).returns(locale);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 5:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('setDeviceLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args when API < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.language', language]).returns("");
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.setDeviceLanguage(language));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getDeviceCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args and return country', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.country']).returns(country);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getDeviceCountry());

          case 3:
            context$3$0.t0 = country;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return country', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.country']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale.region']).returns(country);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceCountry());

          case 4:
            context$3$0.t0 = country;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('setDeviceCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.country', country]).returns("");
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.setDeviceCountry(country));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getDeviceLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args and return locale', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns(locale);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getDeviceLocale());

          case 3:
            context$3$0.t0 = locale;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return locale', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale']).returns(locale);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceLocale());

          case 4:
            context$3$0.t0 = locale;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('setDeviceLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.locale', locale]).returns("");
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.setDeviceLocale(locale));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
