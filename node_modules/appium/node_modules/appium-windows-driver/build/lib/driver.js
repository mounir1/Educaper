'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _winappdriver = require('./winappdriver');

var _winappdriver2 = _interopRequireDefault(_winappdriver);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var WINAPPDRIVER_PORT = 4723;
var WINAPPDRIVER_HOST = "localhost";

// Appium instantiates this class

var WindowsDriver = (function (_BaseDriver) {
  _inherits(WindowsDriver, _BaseDriver);

  function WindowsDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, WindowsDriver);

    _get(Object.getPrototypeOf(WindowsDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.opts.port = opts.port || WINAPPDRIVER_PORT;
    this.opts.address = opts.address || WINAPPDRIVER_HOST;
  }

  _createClass(WindowsDriver, [{
    key: 'createSession',
    value: function createSession(caps) {
      var sessionId, _ref, _ref2;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_appiumSupport.system.isWindows()) {
              context$2$0.next = 2;
              break;
            }

            throw new Error("WinAppDriver tests only run on Windows");

          case 2:
            context$2$0.prev = 2;
            sessionId = undefined;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(WindowsDriver.prototype), 'createSession', this).call(this, caps));

          case 6:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.startWinAppDriverSession());

          case 11:
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 14:
            context$2$0.prev = 14;
            context$2$0.t0 = context$2$0['catch'](2);
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 18:
            throw context$2$0.t0;

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 14]]);
    }
  }, {
    key: 'startWinAppDriverSession',
    value: function startWinAppDriverSession() {
      return _regeneratorRuntime.async(function startWinAppDriverSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.winAppDriver = new _winappdriver2['default']({
              app: this.opts.app
            });
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.winAppDriver.start());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.winAppDriver.startSession(this.caps));

          case 5:
            this.proxyReqRes = this.winAppDriver.proxyReqRes.bind(this.winAppDriver);
            // now that everything has started successfully, turn on proxying so all
            // subsequent session requests go straight to/from WinAppDriver
            this.jwpProxyActive = true;

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting WinAppDriver session');

            if (!(this.winAppDriver && this.jwpProxyActive)) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.winAppDriver.deleteSession());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.winAppDriver.stop());

          case 6:
            this.winAppDriver = null;

          case 7:
            this.jwpProxyActive = false;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(WindowsDriver.prototype), 'deleteSession', this).call(this));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive() {
      // we always have an active proxy to the WinAppDriver server
      return true;
    }
  }, {
    key: 'canProxy',
    value: function canProxy() {
      // we can always proxy to the WinAppDriver server
      return true;
    }
  }]);

  return WindowsDriver;
})(_appiumBaseDriver.BaseDriver);

exports.WindowsDriver = WindowsDriver;
exports['default'] = WindowsDriver;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0NBQTJCLG9CQUFvQjs7NkJBQ3hCLGdCQUFnQjs7NEJBQ2QsZ0JBQWdCOzs7O3NCQUN0QixVQUFVOzs7O0FBRTdCLElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQy9CLElBQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDOzs7O0lBR2hDLGFBQWE7WUFBYixhQUFhOztBQUNMLFdBRFIsYUFBYSxHQUNrQztRQUF0QyxJQUFJLHlEQUFHLEVBQUU7UUFBRSxrQkFBa0IseURBQUcsSUFBSTs7MEJBRDdDLGFBQWE7O0FBRWYsK0JBRkUsYUFBYSw2Q0FFVCxJQUFJLEVBQUUsa0JBQWtCLEVBQUU7QUFDaEMsUUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7QUFDNUIsUUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxpQkFBaUIsQ0FBQztBQUNoRCxRQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLGlCQUFpQixDQUFDO0dBQ3ZEOztlQU5HLGFBQWE7O1dBUUcsdUJBQUMsSUFBSTtVQUtqQixTQUFTOzs7OztnQkFKVixzQkFBTyxTQUFTLEVBQUU7Ozs7O2tCQUNmLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDOzs7O0FBR3JELHFCQUFTOzt3RUFiYixhQUFhLCtDQWMyQixJQUFJOzs7OztBQUEzQyxxQkFBUzs7NkNBQ0osSUFBSSxDQUFDLHdCQUF3QixFQUFFOzs7Z0RBQzlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQzs7Ozs7OzZDQUVsQixJQUFJLENBQUMsYUFBYSxFQUFFOzs7Ozs7Ozs7O0tBRzdCOzs7V0FFOEI7Ozs7QUFDN0IsZ0JBQUksQ0FBQyxZQUFZLEdBQUcsOEJBQWlCO0FBQ25DLGlCQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO2FBQ25CLENBQUMsQ0FBQzs7NkNBQ0csSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUU7Ozs7NkNBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7OztBQUMvQyxnQkFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7QUFHekUsZ0JBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDOzs7Ozs7O0tBQzVCOzs7V0FFbUI7Ozs7QUFDbEIsZ0NBQU8sS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7O2tCQUUxQyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUE7Ozs7Ozs2Q0FDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUU7Ozs7NkNBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFOzs7QUFDOUIsZ0JBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDOzs7QUFFM0IsZ0JBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDOzt3RUEzQzFCLGFBQWE7Ozs7Ozs7S0E2Q2hCOzs7V0FFVyx1QkFBRzs7QUFFYixhQUFPLElBQUksQ0FBQztLQUNiOzs7V0FFUSxvQkFBRzs7QUFFVixhQUFPLElBQUksQ0FBQztLQUNiOzs7U0F2REcsYUFBYTs7O1FBMERWLGFBQWEsR0FBYixhQUFhO3FCQUNQLGFBQWEiLCJmaWxlIjoibGliL2RyaXZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEcml2ZXIgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgc3lzdGVtIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IFdpbkFwcERyaXZlciBmcm9tICcuL3dpbmFwcGRyaXZlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgV0lOQVBQRFJJVkVSX1BPUlQgPSA0NzIzO1xuY29uc3QgV0lOQVBQRFJJVkVSX0hPU1QgPSBcImxvY2FsaG9zdFwiO1xuXG4vLyBBcHBpdW0gaW5zdGFudGlhdGVzIHRoaXMgY2xhc3NcbmNsYXNzIFdpbmRvd3NEcml2ZXIgZXh0ZW5kcyBCYXNlRHJpdmVyIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc2hvdWxkVmFsaWRhdGVDYXBzID0gdHJ1ZSkge1xuICAgIHN1cGVyKG9wdHMsIHNob3VsZFZhbGlkYXRlQ2Fwcyk7XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMub3B0cy5wb3J0ID0gb3B0cy5wb3J0IHx8IFdJTkFQUERSSVZFUl9QT1JUO1xuICAgIHRoaXMub3B0cy5hZGRyZXNzID0gb3B0cy5hZGRyZXNzIHx8IFdJTkFQUERSSVZFUl9IT1NUO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoY2Fwcykge1xuICAgIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXaW5BcHBEcml2ZXIgdGVzdHMgb25seSBydW4gb24gV2luZG93c1wiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzZXNzaW9uSWQ7XG4gICAgICBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbigpO1xuICAgICAgcmV0dXJuIFtzZXNzaW9uSWQsIGNhcHNdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGF3YWl0IHRoaXMuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdGFydFdpbkFwcERyaXZlclNlc3Npb24gKCkge1xuICAgIHRoaXMud2luQXBwRHJpdmVyID0gbmV3IFdpbkFwcERyaXZlcih7XG4gICAgICBhcHA6IHRoaXMub3B0cy5hcHBcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdGFydCgpO1xuICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnN0YXJ0U2Vzc2lvbih0aGlzLmNhcHMpO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLndpbkFwcERyaXZlci5wcm94eVJlcVJlcy5iaW5kKHRoaXMud2luQXBwRHJpdmVyKTtcbiAgICAvLyBub3cgdGhhdCBldmVyeXRoaW5nIGhhcyBzdGFydGVkIHN1Y2Nlc3NmdWxseSwgdHVybiBvbiBwcm94eWluZyBzbyBhbGxcbiAgICAvLyBzdWJzZXF1ZW50IHNlc3Npb24gcmVxdWVzdHMgZ28gc3RyYWlnaHQgdG8vZnJvbSBXaW5BcHBEcml2ZXJcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnRGVsZXRpbmcgV2luQXBwRHJpdmVyIHNlc3Npb24nKTtcblxuICAgIGlmICh0aGlzLndpbkFwcERyaXZlciAmJiB0aGlzLmp3cFByb3h5QWN0aXZlKSB7XG4gICAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdG9wKCk7XG4gICAgICB0aGlzLndpbkFwcERyaXZlciA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICBhd2FpdCBzdXBlci5kZWxldGVTZXNzaW9uKCk7XG4gIH1cblxuICBwcm94eUFjdGl2ZSAoKSB7XG4gICAgLy8gd2UgYWx3YXlzIGhhdmUgYW4gYWN0aXZlIHByb3h5IHRvIHRoZSBXaW5BcHBEcml2ZXIgc2VydmVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjYW5Qcm94eSAoKSB7XG4gICAgLy8gd2UgY2FuIGFsd2F5cyBwcm94eSB0byB0aGUgV2luQXBwRHJpdmVyIHNlcnZlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCB7IFdpbmRvd3NEcml2ZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFdpbmRvd3NEcml2ZXI7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
