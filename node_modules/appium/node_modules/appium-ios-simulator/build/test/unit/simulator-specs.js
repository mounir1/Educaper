require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _ = require('../..');

var _libSimulatorXcode6 = require('../../lib/simulator-xcode-6');

var _libSimulatorXcode62 = _interopRequireDefault(_libSimulatorXcode6);

var _libSimulatorXcode7 = require('../../lib/simulator-xcode-7');

var _libSimulatorXcode72 = _interopRequireDefault(_libSimulatorXcode7);

var _nodeSimctl = require('node-simctl');

var simctl = _interopRequireWildcard(_nodeSimctl);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _assetsDeviceList = require('../assets/deviceList');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var UDID = _assetsDeviceList.devices['7.1'][0].udid;

describe('simulator', function () {
  var xcodeMock = undefined;
  var getDevicesStub = undefined;

  beforeEach(function () {
    xcodeMock = _sinon2['default'].mock(_appiumXcode2['default']);
    getDevicesStub = _sinon2['default'].stub(simctl, 'getDevices');
    getDevicesStub.returns(_bluebird2['default'].resolve(_assetsDeviceList.devices));
  });
  afterEach(function () {
    xcodeMock.restore();
    simctl.getDevices.restore();
  });

  describe('getSimulator', function () {
    it('should create a simulator with default xcode version', function callee$2$0() {
      var xcodeVersion, sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            xcodeVersion = { major: 6, versionString: '6.0.0' };

            xcodeMock.expects('getVersion').returns(_bluebird2['default'].resolve(xcodeVersion));

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(UDID));

          case 4:
            sim = context$3$0.sent;

            sim.xcodeVersion.should.equal(xcodeVersion);
            sim.should.be.an['instanceof'](_libSimulatorXcode62['default']);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should create an xcode 7 simulator with xcode version 7', function callee$2$0() {
      var xcodeVersion, sim;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            xcodeVersion = { major: 7, versionString: '7.0.0' };

            xcodeMock.expects('getVersion').returns(_bluebird2['default'].resolve(xcodeVersion));

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(UDID));

          case 4:
            sim = context$3$0.sent;

            sim.xcodeVersion.should.equal(xcodeVersion);
            sim.should.be.an['instanceof'](_libSimulatorXcode72['default']);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should throw an error if xcode version less than 6', function callee$2$0() {
      var xcodeVersion;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            xcodeVersion = { major: 5, versionString: '5.4.0' };

            xcodeMock.expects('getVersion').returns(_bluebird2['default'].resolve(xcodeVersion));

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(UDID).should.eventually.be.rejectedWith('version'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should throw an error if xcode version above 8', function callee$2$0() {
      var xcodeVersion;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            xcodeVersion = { major: 9, versionString: '9.0.0' };

            xcodeMock.expects('getVersion').returns(_bluebird2['default'].resolve(xcodeVersion));

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _.getSimulator)(UDID).should.eventually.be.rejectedWith('not yet'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should throw an error if udid does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _.getSimulator)('123').should.be.rejectedWith('No sim found'));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should list stats for sim', function callee$2$0() {
      var xcodeVersion, sims, stats;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            xcodeVersion = { major: 6, versionString: '6.0.0' };

            xcodeMock.expects('getVersion').atLeast(1).returns(_bluebird2['default'].resolve(xcodeVersion));

            sims = [(0, _.getSimulator)('F33783B2-9EE9-4A99-866E-E126ADBAD410'), (0, _.getSimulator)('DFBC2970-9455-4FD9-BB62-9E4AE5AA6954')];
            stats = sims.map(function (simProm) {
              return simProm.then(function (sim) {
                return sim.stat();
              });
            });
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(stats));

          case 6:
            stats = context$3$0.sent;

            stats[0].state.should.equal('Shutdown');
            stats[0].name.should.equal('Resizable iPhone');
            stats[1].state.should.equal('Shutdown');
            stats[1].name.should.equal('Resizable iPad');

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('getDeviceString', function () {
    describe('Xcode 6', function () {
      var xcodeVersion = { major: 6, versionString: '6.0.0' };

      beforeEach(function () {
        xcodeMock.expects('getVersion').returns(_bluebird2['default'].resolve(xcodeVersion));
      });

      it('should get the correct device for iOS 8+', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(8.4));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)());

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.4 Simulator)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get the correct device for iOS 8+ when platform version passed in', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ platformVersion: '8.1' }));

            case 2:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.1 Simulator)');

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get the correct device for iOS 7+', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(7.1));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)());

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 5s (7.1 Simulator)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get the correct device for iOS 7+ when platform version passed in', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ platformVersion: '7.1' }));

            case 2:
              device = context$4$0.sent;

              device.should.equal('iPhone 5s (7.1 Simulator)');

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should pass through device name when passed with =', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(8.4));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: '=fancy device' }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('fancy device');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should add a device name when passed without =', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(8.4));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: 'fancy device' }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('fancy device (8.4 Simulator)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should handle string platform version', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve('8.4'));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)());

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.4 Simulator)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should strip " Simulator" when not necessary', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve('8.4'));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: "iPhone 6 Simulator" }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.4 Simulator)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should handle bare "iPhone"', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve('8.4'));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: "iPhone" }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.4 Simulator)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('Xcode 7', function () {
      var xcodeVersion = { major: 7, versionString: '7.0.0' };

      beforeEach(function () {
        xcodeMock.expects('getVersion').returns(_bluebird2['default'].resolve(xcodeVersion));
      });

      it('should get the correct device for iOS 8+', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(8.4));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)());

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.4)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get the correct device for iOS 8+ when platform version passed in', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_libSimulatorXcode72['default'].getDeviceString({ platformVersion: '8.1' }));

            case 2:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (8.1)');

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get the correct device for iOS 9+', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(9));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)());

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (9.0) [');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get the correct device for iOS 9+ when platform version passed in', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ platformVersion: '9.0' }));

            case 2:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (9.0) [');

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should pass through device name when passed with =', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(9.0));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: '=fancy device' }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('fancy device');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should add a device name when passed without =', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve(9.0));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: 'fancy device' }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('fancy device (9.0)');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should strip " Simulator" when not necessary', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve('9.0'));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: "iPhone 6 Simulator" }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (9.0) [');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should handle bare "iPhone"', function callee$3$0() {
        var device;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              xcodeMock.expects('getMaxIOSSDK').returns(_bluebird2['default'].resolve('9.0'));
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap((0, _.getDeviceString)({ deviceName: "iPhone" }));

            case 3:
              device = context$4$0.sent;

              device.should.equal('iPhone 6 (9.0) [');

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
