'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var sqlite3 = _bluebird2['default'].promisifyAll(require('sqlite3'));
var openssl = _bluebird2['default'].promisify(require('openssl-wrapper').exec);

var tset = '<?xml version="1.0" encoding="UTF-8"?>\n\n    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n    <plist version="1.0">\n    <array/>\n</plist>';

/**
 * Library for programatically adding certificates 
 */

var Certificate = (function () {
  function Certificate(pemFilename) {
    _classCallCheck(this, Certificate);

    this.pemFilename = pemFilename;
  }

  /**
   * Interface for adding and removing records to TrustStore.sqlite3 databases that Keychains use
   */

  /**
   * Add a certificate to the TrustStore
   */

  _createClass(Certificate, [{
    key: 'add',
    value: function add(dir) {
      var data, subject, fingerprint, trustStore;
      return _regeneratorRuntime.async(function add$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDerData(this.pemFilename));

          case 2:
            data = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.getSubject(this.pemFilename));

          case 5:
            subject = context$2$0.sent;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.getFingerPrint(this.data));

          case 8:
            fingerprint = context$2$0.sent;
            trustStore = new TrustStore(dir);
            return context$2$0.abrupt('return', trustStore.addRecord(fingerprint, tset, subject, data));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Checks if keychain at given directory has this certificate
     */
  }, {
    key: 'has',
    value: function has(dir) {
      var subject, trustStore, records;
      return _regeneratorRuntime.async(function has$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getSubject(this.pemFilename));

          case 2:
            subject = context$2$0.sent;
            trustStore = new TrustStore(dir);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(trustStore.getRecords(subject));

          case 6:
            records = context$2$0.sent;
            return context$2$0.abrupt('return', records.length > 0);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Remove certificate from the TrustStore
     */
  }, {
    key: 'remove',
    value: function remove(dir) {
      var subject, trustStore;
      return _regeneratorRuntime.async(function remove$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getSubject(this.pemFilename));

          case 2:
            subject = context$2$0.sent;
            trustStore = new TrustStore(dir);
            return context$2$0.abrupt('return', trustStore.removeRecord(subject));

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Translate PEM file to DER buffer
     */
  }, {
    key: 'getDerData',
    value: function getDerData() {
      return _regeneratorRuntime.async(function getDerData$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.data) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.data);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(openssl('x509', {
              outform: 'der',
              'in': this.pemFilename
            }));

          case 4:
            this.data = context$2$0.sent;
            return context$2$0.abrupt('return', this.data);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get SHA1 fingerprint from der data before
     */
  }, {
    key: 'getFingerPrint',
    value: function getFingerPrint() {
      var data, shasum;
      return _regeneratorRuntime.async(function getFingerPrint$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.fingerprint) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.fingerprint);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.getDerData());

          case 4:
            data = context$2$0.sent;
            shasum = _crypto2['default'].createHash('sha1');

            shasum.update(data);
            this.fingerprint = shasum.digest();
            return context$2$0.abrupt('return', this.fingerprint);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Parse the subject from the der data
     */
  }, {
    key: 'getSubject',
    value: function getSubject() {
      var subject, subRegex;
      return _regeneratorRuntime.async(function getSubject$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.subject) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.subject);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(openssl('x509', {
              noout: true,
              subject: true,
              'in': this.pemFilename
            }));

          case 4:
            subject = context$2$0.sent;
            subRegex = /^subject[\w\W]*\/CN=([\w\W]*)(\n)?/;

            this.subject = subject.toString().match(subRegex)[1];
            return context$2$0.abrupt('return', this.subject);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return Certificate;
})();

var TrustStore = (function () {
  function TrustStore(sharedResourceDir) {
    _classCallCheck(this, TrustStore);

    this.sqliteDBPath = _path2['default'].resolve(sharedResourceDir, 'Library/Keychains/TrustStore.sqlite3');
    this.db = new sqlite3.Database(this.sqliteDBPath);
  }

  /**
   * Add record to tsettings
   */

  _createClass(TrustStore, [{
    key: 'addRecord',
    value: function addRecord(sha1, tset, subj, data) {
      var existingRecords;
      return _regeneratorRuntime.async(function addRecord$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getRecords(subj));

          case 2:
            existingRecords = context$2$0.sent;

            if (!(existingRecords.length > 0)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.db.runAsync('UPDATE tsettings SET sha1=?, tset=?, data=? WHERE subj=?', [sha1, tset, data, subj]));

          case 6:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.db.runAsync('INSERT INTO tsettings (sha1, subj, tset, data) VALUES (?, ?, ?, ?)', [sha1, subj, tset, data]));

          case 11:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Remove record from tsettings
     */
  }, {
    key: 'removeRecord',
    value: function removeRecord(subj) {
      return _regeneratorRuntime.async(function removeRecord$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', this.db.runAsync('DELETE FROM tsettings WHERE subj = ?', [subj]));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get a record from tsettings
     */
  }, {
    key: 'getRecords',
    value: function getRecords(subj) {
      return _regeneratorRuntime.async(function getRecords$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', this.db.allAsync('SELECT * FROM tsettings WHERE subj = ?', [subj]));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return TrustStore;
})();

exports['default'] = Certificate;
exports.Certificate = Certificate;
exports.TrustStore = TrustStore;

// Convert 'pem' file to 'der'

// Convert 'pem' file to 'der'
//# sourceMappingURL=data:application/json;charset=utf8;base64,
