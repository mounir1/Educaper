require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('utils', function () {
  describe('getInstrumentsPath', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    it('should retrieve path', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getInstrumentsPath());

          case 3:
            context$3$0.sent.should.equal('/a/b/c/d');

            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error if cannnot find Instruments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().throws(new Error('Instruments not found'));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getInstrumentsPath().should.be.rejectedWith(/Could not find the instruments binary/));

          case 3:
            (0, _appiumTestSupport.verify)(mocks);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getAvailableDevices', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    it('should work for Xcode 7.3', function callee$2$0() {
      var instrumentsOutput, devices;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instrumentsOutput = 'Known Devices:\nINsaikrisv [C8476FF9-9BC4-5E52-AE3D-536A2E85D43B]\nAppiumParallel1 (9.2) [0120C306-95C1-4196-BC13-4196105EBEF9]\nApple TV 1080p (9.1) [C5957108-6BA4-4A98-9A83-4BED47EFF1BC]\niPad 2 (8.4) [B45264A0-551C-41A5-A636-8211C05D8003] (Simulator)\niPad 2 (9.2) [4444EB1E-BA48-4DFA-B16C-777171FCF3BC] (Simulator)\niPad Air (8.4) [F26279E7-8BAF-4D7B-ABFE-08D1AC364DCF] (Simulator)';
            devices = ['AppiumParallel1 (9.2) [0120C306-95C1-4196-BC13-4196105EBEF9]', 'Apple TV 1080p (9.1) [C5957108-6BA4-4A98-9A83-4BED47EFF1BC]', 'iPad 2 (8.4) [B45264A0-551C-41A5-A636-8211C05D8003] (Simulator)', 'iPad 2 (9.2) [4444EB1E-BA48-4DFA-B16C-777171FCF3BC] (Simulator)', 'iPad Air (8.4) [F26279E7-8BAF-4D7B-ABFE-08D1AC364DCF] (Simulator)'];

            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: instrumentsOutput, stderr: '' }));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_.utils.getAvailableDevices());

          case 6:
            context$3$0.t0 = devices;
            context$3$0.sent.should.deep.equal(context$3$0.t0);

            (0, _appiumTestSupport.verify)(mocks);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should work for Xcode 7.0-7.2', function callee$2$0() {
      var instrumentsOutput, devices;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instrumentsOutput = 'Known Devices:\nINsaikrisv [C8476FF9-9BC4-5E52-AE3D-536A2E85D43B]\nAppiumParallel1 (9.2) [0120C306-95C1-4196-BC13-4196105EBEF9]\nApple TV 1080p (9.1) [C5957108-6BA4-4A98-9A83-4BED47EFF1BC]\niPad 2 (8.4) [B45264A0-551C-41A5-A636-8211C05D8003]\niPad 2 (9.2) [4444EB1E-BA48-4DFA-B16C-777171FCF3BC]\niPad Air (8.4) [F26279E7-8BAF-4D7B-ABFE-08D1AC364DCF]';
            devices = ['AppiumParallel1 (9.2) [0120C306-95C1-4196-BC13-4196105EBEF9]', 'Apple TV 1080p (9.1) [C5957108-6BA4-4A98-9A83-4BED47EFF1BC]', 'iPad 2 (8.4) [B45264A0-551C-41A5-A636-8211C05D8003]', 'iPad 2 (9.2) [4444EB1E-BA48-4DFA-B16C-777171FCF3BC]', 'iPad Air (8.4) [F26279E7-8BAF-4D7B-ABFE-08D1AC364DCF]'];

            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: instrumentsOutput, stderr: '' }));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_.utils.getAvailableDevices());

          case 6:
            context$3$0.t0 = devices;
            context$3$0.sent.should.deep.equal(context$3$0.t0);

            (0, _appiumTestSupport.verify)(mocks);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should work for Xcode 6', function callee$2$0() {
      var instrumentsOutput, devices;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instrumentsOutput = 'Known Devices:\nINsaikrisv [C8476FF9-9BC4-5E52-AE3D-536A2E85D43B]\nAppiumParallel1 (8.4 Simulator) [0120C306-95C1-4196-BC13-4196105EBEF9]\nApple TV 1080p (8.4 Simulator) [C5957108-6BA4-4A98-9A83-4BED47EFF1BC]\niPad 2 (8.4 Simulator) [B45264A0-551C-41A5-A636-8211C05D8003]\niPad Air (8.2 Simulator) [F26279E7-8BAF-4D7B-ABFE-08D1AC364DCF]';
            devices = ['AppiumParallel1 (8.4 Simulator) [0120C306-95C1-4196-BC13-4196105EBEF9]', 'Apple TV 1080p (8.4 Simulator) [C5957108-6BA4-4A98-9A83-4BED47EFF1BC]', 'iPad 2 (8.4 Simulator) [B45264A0-551C-41A5-A636-8211C05D8003]', 'iPad Air (8.2 Simulator) [F26279E7-8BAF-4D7B-ABFE-08D1AC364DCF]'];

            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: instrumentsOutput, stderr: '' }));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_.utils.getAvailableDevices());

          case 6:
            context$3$0.t0 = devices;
            context$3$0.sent.should.deep.equal(context$3$0.t0);

            (0, _appiumTestSupport.verify)(mocks);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error when Instruments fails', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            mocks.tp.expects('exec').once().throws(new Error('Instruments failed'));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_.utils.getAvailableDevices().should.be.rejectedWith(/Failed getting devices, err: Error: Instruments failed./));

          case 4:
            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('killAllInstruments', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    it('should work', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().returns(_Promise.resolve({ stdout: '', stderr: '' }));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.killAllInstruments());

          case 3:
            (0, _appiumTestSupport.verify)(mocks);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('cleanAllTraces', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs }, function (mocks) {
    (0, _appiumTestSupport.stubEnv)();
    it('should work', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            process.env.CLEAN_TRACES = 1;
            mocks.fs.expects('rimraf').once().returns(_Promise.resolve({ stdout: '', stderr: '' }));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_.utils.cleanAllTraces());

          case 4:
            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('parseLaunchTimeout', function () {
    (0, _appiumTestSupport.stubEnv)();
    it('should work', function () {
      _.utils.parseLaunchTimeout(90000).should.deep.equal({
        global: 90000 });
      _.utils.parseLaunchTimeout('90000').should.deep.equal({
        global: 90000 });
      _.utils.parseLaunchTimeout({ global: 90000, afterLaunch: 30000 }).should.deep.equal({
        global: 90000, afterLaunch: 30000 });
      _.utils.parseLaunchTimeout('{"global": 90000, "afterLaunch": 30000}').should.deep.equal({
        global: 90000, afterLaunch: 30000 });
    });
    it('should work with invalid JSON', function () {
      _.utils.parseLaunchTimeout('x').should.equal('x');
    });
  });
  describe('getIwdPath', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs }, function (mocks) {
    it('should work when path is found', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects('exists').once().returns(_Promise.resolve(true));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getIwdPath('10'));

          case 3:
            context$3$0.sent.should.match(/.*thirdparty\/iwd10/);

            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should work when path is not found', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects('exists').once().returns(_Promise.resolve(false));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getIwdPath('10'));

          case 3:
            context$3$0.sent.should.match(/.*thirdparty\/iwd/);

            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('quickLaunch', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, tp: tp }, function (mocks) {
    it('should remove trace directory', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects('rimraf').once().returns(_Promise.resolve());
            mocks.tp.expects('exec').once().withArgs('xcrun').returns(_Promise.resolve({ stdout: '', stderr: '' }));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_.utils.quickLaunch());

          case 4:
            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('quickInstruments', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'] }, function (mocks) {
    it('should create an Instruments object', function callee$2$0() {
      var inst;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_.utils.quickInstruments({
              xcodeTraceTemplatePath: '/some/path'
            }));

          case 2:
            inst = context$3$0.sent;

            inst.should.be.an['instanceof'](_.Instruments);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should get xcode trace template if none supplied', function callee$2$0() {
      var inst;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.xcode.expects('getAutomationTraceTemplatePath').once().returns(_Promise.resolve('/some/path'));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.quickInstruments());

          case 3:
            inst = context$3$0.sent;

            inst.template.should.equal('/some/path');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,