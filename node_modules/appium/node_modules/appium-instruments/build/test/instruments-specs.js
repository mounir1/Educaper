require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this2 = this;

var _ = require('..');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();

var XCODE_VERSION = {
  versionString: '7.1.1',
  versionFloat: 7.1,
  major: 7,
  minor: 1,
  patch: 1
};

describe('instruments', function () {
  describe('quickInstrument', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should create instruments', function callee$2$0() {
            var opts, instruments;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  opts = {
                    app: '/a/b/c/my.app'
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap(_.Instruments.quickInstruments(opts));

                case 3:
                  instruments = context$3$0.sent;

                  instruments.app.should.equal(opts.app);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  describe('constructor', function () {
    it('should create instruments', function () {
      var opts = {
        app: '/a/b/c/my.app'
      };
      var instruments = new _.Instruments(opts);
      instruments.app.should.equal(opts.app);
    });
  });
  describe('configure', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'], utils: _.utils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            mocks.xcode.expects('getVersion').once().returns(_Promise.resolve(XCODE_VERSION));
            mocks.xcode.expects('getAutomationTraceTemplatePath').once().returns(_Promise.resolve('/a/b/c/d/tracetemplate'));
            mocks.utils.expects('getInstrumentsPath').once().returns(_Promise.resolve('/a/b/c/instrumentspath'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(instruments.configure());

          case 6:
            instruments.xcodeVersion.versionString.should.equal(XCODE_VERSION.versionString);
            instruments.template.should.equal('/a/b/c/d/tracetemplate');
            instruments.instrumentsPath.should.equal('/a/b/c/instrumentspath');
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }));
  describe('spawnInstruments', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, tp: tp, utils: _.utils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            instruments.xcodeVersion = XCODE_VERSION;
            instruments.template = '/a/b/c/d/tracetemplate';
            instruments.instrumentsPath = '/a/b/c/instrumentspath';
            mocks.fs.expects('exists').once().returns(_Promise.resolve(false));
            mocks.tp.expects('spawn').once().returns({});
            mocks.utils.expects('getIwdPath').once().returns(_Promise.resolve('/a/b/c/iwd'));
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 9:
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    it('should properly handle process arguments', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            instruments.processArguments = '-e firstoption firstoptionsarg -e secondoption second option arg';
            instruments.xcodeVersion = XCODE_VERSION;
            instruments.template = '/a/b/c/d/tracetemplate';
            instruments.instrumentsPath = '/a/b/c/instrumentspath';
            mocks.fs.expects('exists').once().returns(_Promise.resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "-e", "firstoption", "firstoptionsarg", "-e", "secondoption", "second option arg", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments"], _sinon2['default'].match.object).returns({});
            mocks.utils.expects('getIwdPath').once().returns(_Promise.resolve('/a/b/c/iwd'));
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 10:

            (0, _appiumTestSupport.verify)(mocks);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    it('should properly handle non-environment-variable process arguments', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            instruments.processArguments = 'some random process arguments';
            instruments.xcodeVersion = XCODE_VERSION;
            instruments.template = '/a/b/c/d/tracetemplate';
            instruments.instrumentsPath = '/a/b/c/instrumentspath';
            mocks.fs.expects('exists').once().returns(_Promise.resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "some random process arguments", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments"], _sinon2['default'].match.object).returns({});
            mocks.utils.expects('getIwdPath').once().returns(_Promise.resolve('/a/b/c/iwd'));
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 10:

            (0, _appiumTestSupport.verify)(mocks);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    it('should properly handle process arguments as hash', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            instruments.processArguments = { firstoption: 'firstoptionsarg', secondoption: 'second option arg' };
            instruments.xcodeVersion = XCODE_VERSION;
            instruments.template = '/a/b/c/d/tracetemplate';
            instruments.instrumentsPath = '/a/b/c/instrumentspath';
            mocks.fs.expects('exists').once().returns(_Promise.resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "-e", "firstoption", "firstoptionsarg", "-e", "secondoption", "second option arg", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments"], _sinon2['default'].match.object).returns({});
            mocks.utils.expects('getIwdPath').once().returns(_Promise.resolve('/a/b/c/iwd'));
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 10:

            (0, _appiumTestSupport.verify)(mocks);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,